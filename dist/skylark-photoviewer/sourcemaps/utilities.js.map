{"version":3,"sources":["utilities.js"],"names":["define","langx","browser","noder","geom","images","document","window","throttle","debounce","preloadImage","src","success","error","preload","then","data","imgs","requestFullscreen","fullscreen","exitFullscreen","getImageNameFromUrl","url","replace","hasScrollbar","getScrollbarWidth","scrollbarWidth","setGrabCursor","imageData","stageData","stage","isRotated","imageWidth","h","w","imageHeight","addClass","removeClass","supportTouch","support","tocuh"],"mappings":";;;;;;;AAAAA,QACI,gBACA,uBACA,qBACA,oBACA,uBACF,SAAUC,EAAMC,EAAQC,EAAMC,EAAKC,GACjC,aAqFA,OACIC,SArFaC,OAAOD,SAsFpBE,SAAUP,EAAMQ,SAChBC,aAAc,SAAsBC,EAAKC,EAASC,GAC9CR,EAAOS,QAAQH,GAAKI,KAAK,SAASC,GAC9BJ,EAAQI,EAAKC,KAAK,KACpBJ,IAENK,kBAAmBf,EAAMgB,WACzBC,eAAgBjB,EAAMgB,WACtBE,oBAhBJ,SAA6BC,GAGzB,OADYA,EAAIC,QADJ,oCACiB,OAe7BC,aAAcpB,EAAKoB,aACnBC,kBAAmBrB,EAAKsB,eACxBC,cA9BH,SAAuBC,EAAWC,EAAWC,EAAOC,GACjD,MAAMC,EAAcD,EAA0BH,EAAUK,EAAxBL,EAAUM,EACpCC,EAAeJ,EAA0BH,EAAUM,EAAxBN,EAAUK,GACvCE,EAAcN,EAAUI,GAAKD,EAAaH,EAAUK,IACpDJ,EAAMM,SAAS,WAEfD,GAAeN,EAAUI,GAAKD,GAAcH,EAAUK,GACtDJ,EAAMO,YAAY,YAwBtBC,aAAc,WACV,OAAOpC,EAAQqC,QAAQC","file":"../utilities.js","sourcesContent":["define([\n    \"skylark-langx\",\n    \"skylark-domx-browser\",\n    \"skylark-domx-noder\",\n    \"skylark-domx-geom\",\n    \"skylark-domx-images\"\n],function (langx,browser,noder,geom,images) {\n    'use strict';\n    const document = window.document;\n\n    /*\n    function throttle(fn, delay) {\n        let timer = null;\n        return function () {\n            const context = this;\n            const args = arguments;\n            clearTimeout(timer);\n            timer = setTimeout(function () {\n                fn.apply(context, args);\n            }, delay);\n        };\n    }\n    function preloadImage(src, success, error) {\n        const img = new Image();\n        img.onload = function () {\n            success(img);\n        };\n        img.onerror = function () {\n            error(img);\n        };\n        img.src = src;\n    }\n    function requestFullscreen(element) {\n        if (element.requestFullscreen) {\n            element.requestFullscreen();\n        } else if (element.mozRequestFullScreen) {\n            element.mozRequestFullScreen();\n        } else if (element.webkitRequestFullscreen) {\n            element.webkitRequestFullscreen();\n        } else if (element.msRequestFullscreen) {\n            element.msRequestFullscreen();\n        }\n    }\n    function exitFullscreen() {\n        if (document.exitFullscreen) {\n            document.exitFullscreen();\n        } else if (document.mozCancelFullScreen) {\n            document.mozCancelFullScreen();\n        } else if (document.webkitExitFullscreen) {\n            document.webkitExitFullscreen();\n        }\n    }\n\n\n    function getScrollbarWidth() {\n        const scrollDiv = document.createElement('div');\n        scrollDiv.style.cssText = 'width: 99px; height: 99px; overflow: scroll; position: absolute; top: -9999px;';\n        document.body.appendChild(scrollDiv);\n        const scrollbarWidth = scrollDiv.offsetWidth - scrollDiv.clientWidth;\n        document.body.removeChild(scrollDiv);\n        return scrollbarWidth;\n    }\n\n    function hasScrollbar() {\n        return document.body.scrollHeight > (window.innerHeight || document.documentElement.clientHeight);\n    }\n\n\n    function supportTouch() {\n        return !!('ontouchstart' in window || window.DocumentTouch && document instanceof window.DocumentTouch);\n    }\n\n    */\n \n\n     function setGrabCursor(imageData, stageData, stage, isRotated) {\n        const imageWidth = !isRotated ? imageData.w : imageData.h;\n        const imageHeight = !isRotated ? imageData.h : imageData.w;\n        if (imageHeight > stageData.h || imageWidth > stageData.w) {\n            stage.addClass('is-grab');\n        }\n        if (imageHeight <= stageData.h && imageWidth <= stageData.w) {\n            stage.removeClass('is-grab');\n        }\n    }\n\n    function getImageNameFromUrl(url) {\n        const reg = /^.*?\\/*([^/?]*)\\.[a-z]+(\\?.+|$)/gi;\n        const txt = url.replace(reg, '$1');\n        return txt;\n    }\n\n    return {\n        document: document,\n        throttle: langx.debounce,\n        preloadImage: function preloadImage(src, success, error) {\n            images.preload(src).then(function(data){\n                success(data.imgs[0]);\n            },error);\n        },\n        requestFullscreen: noder.fullscreen,\n        exitFullscreen: noder.fullscreen,\n        getImageNameFromUrl: getImageNameFromUrl,\n        hasScrollbar: geom.hasScrollbar,\n        getScrollbarWidth: geom.scrollbarWidth,\n        setGrabCursor: setGrabCursor,\n        supportTouch: function() {\n            return browser.support.tocuh;\n        }\n    }\n});"]}