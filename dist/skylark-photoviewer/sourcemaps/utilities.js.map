{"version":3,"sources":["utilities.js"],"names":["define","langx","browser","noder","geom","images","document","window","throttle","debounce","preloadImage","src","success","error","preload","then","data","imgs","requestFullscreen","fullscreen","exitFullscreen","getImageNameFromUrl","url","replace","hasScrollbar","getScrollbarWidth","scrollbarWidth","setGrabCursor","imageData","stageData","stage","isRotated","imageWidth","h","w","imageHeight","addClass","removeClass","supportTouch","support","tocuh"],"mappings":";;;;;;;AAAAA,QACI,gBACA,uBACA,qBACA,oBACA,uBACF,SAAUC,EAAMC,EAAQC,EAAMC,EAAKC,GACjC,aAqFA,OACIC,SArFaC,OAAOD,SAsFpBE,SAAUP,EAAMQ,SAChBC,aAAc,SAAsBC,EAAKC,EAASC,GAC9CR,EAAOS,QAAQH,GAAKI,KAAK,SAASC,GAC9BJ,EAAQI,EAAKC,KAAK,KACpBJ,IAENK,kBAAmBf,EAAMgB,WACzBC,eAAgBjB,EAAMgB,WACtBE,oBAhBJ,SAA6BC,GAGzB,OADYA,EAAIC,QADJ,oCACiB,OAe7BC,aAAcpB,EAAKoB,aACnBC,kBAAmBrB,EAAKsB,eACxBC,cA9BH,SAAuBC,EAAWC,EAAWC,EAAOC,GACjD,MAAMC,EAAcD,EAA0BH,EAAUK,EAAxBL,EAAUM,EACpCC,EAAeJ,EAA0BH,EAAUM,EAAxBN,EAAUK,GACvCE,EAAcN,EAAUI,GAAKD,EAAaH,EAAUK,IACpDJ,EAAMM,SAAS,WAEfD,GAAeN,EAAUI,GAAKD,GAAcH,EAAUK,GACtDJ,EAAMO,YAAY,YAwBtBC,aAAc,WACV,OAAOpC,EAAQqC,QAAQC","file":"../utilities.js","sourcesContent":["define([\r\n    \"skylark-langx\",\r\n    \"skylark-domx-browser\",\r\n    \"skylark-domx-noder\",\r\n    \"skylark-domx-geom\",\r\n    \"skylark-domx-images\"\r\n],function (langx,browser,noder,geom,images) {\r\n    'use strict';\r\n    const document = window.document;\r\n\r\n    /*\r\n    function throttle(fn, delay) {\r\n        let timer = null;\r\n        return function () {\r\n            const context = this;\r\n            const args = arguments;\r\n            clearTimeout(timer);\r\n            timer = setTimeout(function () {\r\n                fn.apply(context, args);\r\n            }, delay);\r\n        };\r\n    }\r\n    function preloadImage(src, success, error) {\r\n        const img = new Image();\r\n        img.onload = function () {\r\n            success(img);\r\n        };\r\n        img.onerror = function () {\r\n            error(img);\r\n        };\r\n        img.src = src;\r\n    }\r\n    function requestFullscreen(element) {\r\n        if (element.requestFullscreen) {\r\n            element.requestFullscreen();\r\n        } else if (element.mozRequestFullScreen) {\r\n            element.mozRequestFullScreen();\r\n        } else if (element.webkitRequestFullscreen) {\r\n            element.webkitRequestFullscreen();\r\n        } else if (element.msRequestFullscreen) {\r\n            element.msRequestFullscreen();\r\n        }\r\n    }\r\n    function exitFullscreen() {\r\n        if (document.exitFullscreen) {\r\n            document.exitFullscreen();\r\n        } else if (document.mozCancelFullScreen) {\r\n            document.mozCancelFullScreen();\r\n        } else if (document.webkitExitFullscreen) {\r\n            document.webkitExitFullscreen();\r\n        }\r\n    }\r\n\r\n\r\n    function getScrollbarWidth() {\r\n        const scrollDiv = document.createElement('div');\r\n        scrollDiv.style.cssText = 'width: 99px; height: 99px; overflow: scroll; position: absolute; top: -9999px;';\r\n        document.body.appendChild(scrollDiv);\r\n        const scrollbarWidth = scrollDiv.offsetWidth - scrollDiv.clientWidth;\r\n        document.body.removeChild(scrollDiv);\r\n        return scrollbarWidth;\r\n    }\r\n\r\n    function hasScrollbar() {\r\n        return document.body.scrollHeight > (window.innerHeight || document.documentElement.clientHeight);\r\n    }\r\n\r\n\r\n    function supportTouch() {\r\n        return !!('ontouchstart' in window || window.DocumentTouch && document instanceof window.DocumentTouch);\r\n    }\r\n\r\n    */\r\n \r\n\r\n     function setGrabCursor(imageData, stageData, stage, isRotated) {\r\n        const imageWidth = !isRotated ? imageData.w : imageData.h;\r\n        const imageHeight = !isRotated ? imageData.h : imageData.w;\r\n        if (imageHeight > stageData.h || imageWidth > stageData.w) {\r\n            stage.addClass('is-grab');\r\n        }\r\n        if (imageHeight <= stageData.h && imageWidth <= stageData.w) {\r\n            stage.removeClass('is-grab');\r\n        }\r\n    }\r\n\r\n    function getImageNameFromUrl(url) {\r\n        const reg = /^.*?\\/*([^/?]*)\\.[a-z]+(\\?.+|$)/gi;\r\n        const txt = url.replace(reg, '$1');\r\n        return txt;\r\n    }\r\n\r\n    return {\r\n        document: document,\r\n        throttle: langx.debounce,\r\n        preloadImage: function preloadImage(src, success, error) {\r\n            images.preload(src).then(function(data){\r\n                success(data.imgs[0]);\r\n            },error);\r\n        },\r\n        requestFullscreen: noder.fullscreen,\r\n        exitFullscreen: noder.fullscreen,\r\n        getImageNameFromUrl: getImageNameFromUrl,\r\n        hasScrollbar: geom.hasScrollbar,\r\n        getScrollbarWidth: geom.scrollbarWidth,\r\n        setGrabCursor: setGrabCursor,\r\n        supportTouch: function() {\r\n            return browser.support.tocuh;\r\n        }\r\n    }\r\n});"]}