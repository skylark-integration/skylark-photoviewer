{"version":3,"sources":["movable.js"],"names":["define","$","Constants","ELEMS_WITH_GRABBING_CURSOR","NS","[object Object]","stage","image","isDragging","startX","startY","left","top","widthDiff","heightDiff","δ","dragMove","e","window","event","preventDefault","endX","type","targetTouches","pageX","clientX","endY","pageY","clientY","relativeX","relativeY","newLeft","newTop","css","extend","this","imageData","dragEnd","$D","off","TOUCH_MOVE_EVENT","EVENT_NS","TOUCH_END_EVENT","PUBLIC_VARS","removeClass","on","TOUCH_START_EVENT","imageWidth","width","imageHeight","height","stageWidth","stageHeight","isRotated","position","hasClass","addClass"],"mappings":";;;;;;;AAAAA,QACI,SACA,eACD,SAAUC,EAAGC,GACZ,aACA,MAAMC,kBAA8CD,EAAUE,cAAgBF,EAAUE,cAAgBF,EAAUE,eAAiBF,EAAUE,sBAC7I,OACIC,QAAQC,EAAOC,GACX,IAAIC,GAAa,EACbC,EAAS,EACTC,EAAS,EACTC,EAAO,EACPC,EAAM,EACNC,EAAY,EACZC,EAAa,EACbC,EAAI,EACR,MAqBMC,EAAWC,IAGb,IAFAA,EAAIA,GAAKC,OAAOC,OACdC,iBACEZ,EAAY,CACZ,MAAMa,EAAkB,cAAXJ,EAAEK,KAAuBL,EAAEM,cAAc,GAAGC,MAAQP,EAAEQ,QAC7DC,EAAkB,cAAXT,EAAEK,KAAuBL,EAAEM,cAAc,GAAGI,MAAQV,EAAEW,QAC7DC,EAAYR,EAAOZ,EACnBqB,EAAYJ,EAAOhB,EACzB,IAAIqB,EAAUF,EAAYlB,EACtBqB,EAASF,EAAYlB,EACrBE,EAAa,EACTgB,EAAYlB,EAAMG,EAClBiB,EAASjB,EACFe,EAAYlB,GAAOE,EAAaC,IACvCiB,GAAUlB,EAAaC,GAG3BiB,EAASpB,EAETC,EAAY,EACRgB,EAAYlB,GAAQI,EACpBgB,GAAWhB,EACJc,EAAYlB,GAAQE,EAAYE,IACvCgB,GAAWlB,EAAYE,GAG3BgB,EAAUpB,EAEdV,EAAEM,GAAO0B,KACLtB,KAAMoB,EAAU,KAChBnB,IAAKoB,EAAS,OAElB/B,EAAEiC,OAAOC,KAAKC,WACVzB,KAAMoB,EACNnB,IAAKoB,MAIXK,EAAU,KACZnC,EAAUoC,GAAGC,IAAIrC,EAAUsC,iBAAmBtC,EAAUuC,SAAUzB,GAAUuB,IAAIrC,EAAUwC,gBAAkBxC,EAAUuC,SAAUJ,GAChI7B,GAAa,EACbN,EAAUyC,YAAsB,UAAI,EACpC1C,EAAEE,GAA4ByC,YAAY,gBAE9C3C,EAAEK,GAAOuC,GAAG3C,EAAU4C,kBAAoB5C,EAAUuC,SAjElCxB,KACdA,EAAIA,GAAKC,OAAOC,OACdC,iBACF,MAAM2B,EAAa9C,EAAEM,GAAOyC,QACtBC,EAAchD,EAAEM,GAAO2C,SACvBC,EAAalD,EAAEK,GAAO0C,QACtBI,EAAcnD,EAAEK,GAAO4C,SAC7BzC,EAAoB,eAAXQ,EAAEK,KAAwBL,EAAEM,cAAc,GAAGC,MAAQP,EAAEQ,QAChEf,EAAoB,eAAXO,EAAEK,KAAwBL,EAAEM,cAAc,GAAGI,MAAQV,EAAEW,QAChEb,EAAKoB,KAAKkB,WAAiBN,EAAaE,GAAe,EAAjC,EACtBpC,EAAasB,KAAKkB,UAAsCJ,EAAcE,EAAxCJ,EAAaI,EAC3CrC,EAAcqB,KAAKkB,UAAwCN,EAAaK,EAAzCH,EAAcG,EAC7C5C,EAAaK,EAAY,GAAKC,EAAa,EAC3CZ,EAAUyC,YAAsB,SAAI9B,EAAY,GAAKC,EAAa,EAClEH,EAAOV,EAAEM,GAAO+C,WAAW3C,KAAOI,EAClCH,EAAMX,EAAEM,GAAO+C,WAAW1C,IAAMG,EAC5BT,EAAMiD,SAAS,YACftD,EAAEE,GAA4BqD,SAAS,eAE3CtD,EAAUoC,GAAGO,GAAG3C,EAAUsC,iBAAmBtC,EAAUuC,SAAUzB,GAAU6B,GAAG3C,EAAUwC,gBAAkBxC,EAAUuC,SAAUJ","file":"../movable.js","sourcesContent":["define([\n    './domq',\n    './constants'\n], function ($, Constants) {\n    'use strict';\n    const ELEMS_WITH_GRABBING_CURSOR = `html, body, .${ Constants.NS }-modal, .${ Constants.NS }-stage, .${ Constants.NS }-button, .${ Constants.NS }-resizable-handle`;\n    return {\n        movable(stage, image) {\n            let isDragging = false;\n            let startX = 0;\n            let startY = 0;\n            let left = 0;\n            let top = 0;\n            let widthDiff = 0;\n            let heightDiff = 0;\n            let δ = 0;\n            const dragStart = e => {\n                e = e || window.event;\n                e.preventDefault();\n                const imageWidth = $(image).width();\n                const imageHeight = $(image).height();\n                const stageWidth = $(stage).width();\n                const stageHeight = $(stage).height();\n                startX = e.type === 'touchstart' ? e.targetTouches[0].pageX : e.clientX;\n                startY = e.type === 'touchstart' ? e.targetTouches[0].pageY : e.clientY;\n                δ = !this.isRotated ? 0 : (imageWidth - imageHeight) / 2;\n                widthDiff = !this.isRotated ? imageWidth - stageWidth : imageHeight - stageWidth;\n                heightDiff = !this.isRotated ? imageHeight - stageHeight : imageWidth - stageHeight;\n                isDragging = widthDiff > 0 || heightDiff > 0 ? true : false;\n                Constants.PUBLIC_VARS['isMoving'] = widthDiff > 0 || heightDiff > 0 ? true : false;\n                left = $(image).position().left - δ;\n                top = $(image).position().top + δ;\n                if (stage.hasClass('is-grab')) {\n                    $(ELEMS_WITH_GRABBING_CURSOR).addClass('is-grabbing');\n                }\n                Constants.$D.on(Constants.TOUCH_MOVE_EVENT + Constants.EVENT_NS, dragMove).on(Constants.TOUCH_END_EVENT + Constants.EVENT_NS, dragEnd);\n            };\n            const dragMove = e => {\n                e = e || window.event;\n                e.preventDefault();\n                if (isDragging) {\n                    const endX = e.type === 'touchmove' ? e.targetTouches[0].pageX : e.clientX;\n                    const endY = e.type === 'touchmove' ? e.targetTouches[0].pageY : e.clientY;\n                    const relativeX = endX - startX;\n                    const relativeY = endY - startY;\n                    let newLeft = relativeX + left;\n                    let newTop = relativeY + top;\n                    if (heightDiff > 0) {\n                        if (relativeY + top > δ) {\n                            newTop = δ;\n                        } else if (relativeY + top < -heightDiff + δ) {\n                            newTop = -heightDiff + δ;\n                        }\n                    } else {\n                        newTop = top;\n                    }\n                    if (widthDiff > 0) {\n                        if (relativeX + left > -δ) {\n                            newLeft = -δ;\n                        } else if (relativeX + left < -widthDiff - δ) {\n                            newLeft = -widthDiff - δ;\n                        }\n                    } else {\n                        newLeft = left;\n                    }\n                    $(image).css({\n                        left: newLeft + 'px',\n                        top: newTop + 'px'\n                    });\n                    $.extend(this.imageData, {\n                        left: newLeft,\n                        top: newTop\n                    });\n                }\n            };\n            const dragEnd = () => {\n                Constants.$D.off(Constants.TOUCH_MOVE_EVENT + Constants.EVENT_NS, dragMove).off(Constants.TOUCH_END_EVENT + Constants.EVENT_NS, dragEnd);\n                isDragging = false;\n                Constants.PUBLIC_VARS['isMoving'] = false;\n                $(ELEMS_WITH_GRABBING_CURSOR).removeClass('is-grabbing');\n            };\n            $(stage).on(Constants.TOUCH_START_EVENT + Constants.EVENT_NS, dragStart);\n        }\n    };\n});"]}