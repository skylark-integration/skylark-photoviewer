{"version":3,"sources":["draggable.js"],"names":["define","_movable","$","Constants","[object Object]","modal","dragHandle","dragCancel"],"mappings":";;;;;;;AAAAA,QACI,wCACA,SACA,eACD,SAAUC,EAASC,EAAGC,GACrB,aACA,OACIC,UAAUC,EAAOC,EAAYC,GA4CzBN,EAASC,EAAEG,GAAO","file":"../draggable.js","sourcesContent":["define([\n    \"skylark-domx-plugins-interact/movable\",\n    './domq',\n    './constants'\n], function (_movable,$, Constants) {\n    'use strict';\n    return {\n        draggable(modal, dragHandle, dragCancel) {\n            /*\n            let isDragging = false;\n            let startX = 0;\n            let startY = 0;\n            let left = 0;\n            let top = 0;\n            const dragStart = e => {\n                e = e || window.event;\n                modal.get(0).focus();\n                const elemCancel = $(e.target).closest(dragCancel);\n                if (elemCancel.length) {\n                    return true;\n                }\n                if (this.options.multiInstances) {\n                    modal.css('z-index', ++Constants.PUBLIC_VARS['zIndex']);\n                }\n                isDragging = true;\n                startX = e.type === 'touchstart' ? e.targetTouches[0].pageX : e.clientX;\n                startY = e.type === 'touchstart' ? e.targetTouches[0].pageY : e.clientY;\n                left = $(modal).offset().left;\n                top = $(modal).offset().top;\n                Constants.$D.on(Constants.TOUCH_MOVE_EVENT + Constants.EVENT_NS, dragMove).on(Constants.TOUCH_END_EVENT + Constants.EVENT_NS, dragEnd);\n            };\n            const dragMove = e => {\n                e = e || window.event;\n                e.preventDefault();\n                if (isDragging && !Constants.PUBLIC_VARS['isMoving'] && !Constants.PUBLIC_VARS['isResizing'] && !this.isMaximized) {\n                    const endX = e.type === 'touchmove' ? e.targetTouches[0].pageX : e.clientX;\n                    const endY = e.type === 'touchmove' ? e.targetTouches[0].pageY : e.clientY;\n                    const relativeX = endX - startX;\n                    const relativeY = endY - startY;\n                    $(modal).css({\n                        left: relativeX + left + 'px',\n                        top: relativeY + top + 'px'\n                    });\n                }\n            };\n            const dragEnd = () => {\n                Constants.$D.off(Constants.TOUCH_MOVE_EVENT + Constants.EVENT_NS, dragMove).off(Constants.TOUCH_END_EVENT + Constants.EVENT_NS, dragEnd);\n                isDragging = false;\n            };\n            $(dragHandle).on(Constants.TOUCH_START_EVENT + Constants.EVENT_NS, dragStart);\n            */\n            _movable($(modal)[0]);\n        }\n    };\n});"]}