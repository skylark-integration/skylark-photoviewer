{"version":3,"sources":["resizable.js"],"names":["define","eventer","_Resizable","$","Constants","Utilities","NS","[object Object]","modal","stage","image","minWidth","minHeight","handle","border","directions","top","left","right","bottom","topLeft","topRight","bottomLeft","bottomRight","classes","all","constraints","started","PUBLIC_VARS","moving","e","imageWidth","width","imageHeight","height","css","stopped"],"mappings":";;;;;;;AAAAA,QACI,uBACA,0CACA,SACA,cACA,eACD,SAAUC,EAAQC,EAAWC,EAAGC,EAAWC,GAC1C,aACkDD,EAAUE,GAAgBF,EAAUE,GAAgBF,EAAUE,GAChH,OACIC,UAAUC,EAAOC,EAAOC,EAAOC,EAAUC,GAgMvB,IAAIV,EAAWC,EAAEK,GAAO,IAClCK,QACIC,QACIC,YACIC,KAAK,EACLC,MAAM,EACNC,OAAO,EACPC,QAAQ,EACRC,SAAU,EACVC,UAAW,EACXC,YAAa,EACbC,aAAc,GAElBC,SACIC,OAAUrB,EAAUE,sBACpBU,OAAUZ,EAAUE,wBACpBW,QAAUb,EAAUE,wBACpBY,SAAWd,EAAUE,wBACrBa,UAAYf,EAAUE,wBACtBc,WAAchB,EAAUE,yBACxBe,YAAejB,EAAUE,yBACzBgB,cAAiBlB,EAAUE,yBAC3BiB,eAAkBnB,EAAUE,4BAIxCoB,aACIf,SAAAA,EACAC,UAAAA,GAEJe,QAAU,WACNvB,EAAUwB,YAAwB,YAAI,GAE1CC,OAAS,SAASC,GACd,MAAMC,EAAa5B,EAAEO,GAAOsB,QACtBC,EAAc9B,EAAEO,GAAOwB,SAGvBjB,GAFad,EAAEM,GAAOuB,QAEDD,GAAa,EAClCf,GAFcb,EAAEM,GAAOyB,SAEHD,GAAc,EACxC9B,EAAEO,GAAOyB,KACLlB,KAAAA,EACAD,IAAAA,KAGRoB,QAAS,WACLhC,EAAUwB,YAAwB,YAAI","file":"../resizable.js","sourcesContent":["define([\n    \"skylark-domx-eventer\",\n    \"skylark-domx-plugins-interact/resizable\",\n    './domq',\n    './constants',\n    './utilities'\n], function (eventer,_Resizable,$, Constants, Utilities) {\n    'use strict';\n    const ELEMS_WITH_RESIZE_CURSOR = `html, body, .${ Constants.NS }-modal, .${ Constants.NS }-stage, .${ Constants.NS }-button`;\n    return {\n        resizable(modal, stage, image, minWidth, minHeight) {\n            /*\n            const resizableHandleE = $(`<div class=\"${ Constants.NS }-resizable-handle ${ Constants.NS }-resizable-handle-e\"></div>`);\n            const resizableHandleW = $(`<div class=\"${ Constants.NS }-resizable-handle ${ Constants.NS }-resizable-handle-w\"></div>`);\n            const resizableHandleS = $(`<div class=\"${ Constants.NS }-resizable-handle ${ Constants.NS }-resizable-handle-s\"></div>`);\n            const resizableHandleN = $(`<div class=\"${ Constants.NS }-resizable-handle ${ Constants.NS }-resizable-handle-n\"></div>`);\n            const resizableHandleSE = $(`<div class=\"${ Constants.NS }-resizable-handle ${ Constants.NS }-resizable-handle-se\"></div>`);\n            const resizableHandleSW = $(`<div class=\"${ Constants.NS }-resizable-handle ${ Constants.NS }-resizable-handle-sw\"></div>`);\n            const resizableHandleNE = $(`<div class=\"${ Constants.NS }-resizable-handle ${ Constants.NS }-resizable-handle-ne\"></div>`);\n            const resizableHandleNW = $(`<div class=\"${ Constants.NS }-resizable-handle ${ Constants.NS }-resizable-handle-nw\"></div>`);\n            const resizableHandles = {\n                e: resizableHandleE,\n                s: resizableHandleS,\n                se: resizableHandleSE,\n                n: resizableHandleN,\n                w: resizableHandleW,\n                nw: resizableHandleNW,\n                ne: resizableHandleNE,\n                sw: resizableHandleSW\n            };\n            $(modal).append(resizableHandleE, resizableHandleW, resizableHandleS, resizableHandleN, resizableHandleSE, resizableHandleSW, resizableHandleNE, resizableHandleNW);\n            let isDragging = false;\n            let startX = 0;\n            let startY = 0;\n            let modalData = {\n                w: 0,\n                h: 0,\n                l: 0,\n                t: 0\n            };\n            let stageData = {\n                w: 0,\n                h: 0,\n                l: 0,\n                t: 0\n            };\n            let imageData = {\n                w: 0,\n                h: 0,\n                l: 0,\n                t: 0\n            };\n            let δ = 0;\n            let imgWidth = 0;\n            let imgHeight = 0;\n            let direction = '';\n            const getModalOpts = function (dir, offsetX, offsetY) {\n                const modalLeft = -offsetX + modalData.w > minWidth ? offsetX + modalData.l : modalData.l + modalData.w - minWidth;\n                const modalTop = -offsetY + modalData.h > minHeight ? offsetY + modalData.t : modalData.t + modalData.h - minHeight;\n                const opts = {\n                    e: { width: Math.max(offsetX + modalData.w, minWidth) + 'px' },\n                    s: { height: Math.max(offsetY + modalData.h, minHeight) + 'px' },\n                    se: {\n                        width: Math.max(offsetX + modalData.w, minWidth) + 'px',\n                        height: Math.max(offsetY + modalData.h, minHeight) + 'px'\n                    },\n                    w: {\n                        width: Math.max(-offsetX + modalData.w, minWidth) + 'px',\n                        left: modalLeft + 'px'\n                    },\n                    n: {\n                        height: Math.max(-offsetY + modalData.h, minHeight) + 'px',\n                        top: modalTop + 'px'\n                    },\n                    nw: {\n                        width: Math.max(-offsetX + modalData.w, minWidth) + 'px',\n                        height: Math.max(-offsetY + modalData.h, minHeight) + 'px',\n                        top: modalTop + 'px',\n                        left: modalLeft + 'px'\n                    },\n                    ne: {\n                        width: Math.max(offsetX + modalData.w, minWidth) + 'px',\n                        height: Math.max(-offsetY + modalData.h, minHeight) + 'px',\n                        top: modalTop + 'px'\n                    },\n                    sw: {\n                        width: Math.max(-offsetX + modalData.w, minWidth) + 'px',\n                        height: Math.max(offsetY + modalData.h, minHeight) + 'px',\n                        left: modalLeft + 'px'\n                    }\n                };\n                return opts[dir];\n            };\n            const getImageOpts = function (dir, offsetX, offsetY) {\n                const widthDiff = offsetX + modalData.w > minWidth ? stageData.w - imgWidth + offsetX - δ : minWidth - (modalData.w - stageData.w) - imgWidth - δ;\n                const heightDiff = offsetY + modalData.h > minHeight ? stageData.h - imgHeight + offsetY + δ : minHeight - (modalData.h - stageData.h) - imgHeight + δ;\n                const widthDiff2 = -offsetX + modalData.w > minWidth ? stageData.w - imgWidth - offsetX - δ : minWidth - (modalData.w - stageData.w) - imgWidth - δ;\n                const heightDiff2 = -offsetY + modalData.h > minHeight ? stageData.h - imgHeight - offsetY + δ : minHeight - (modalData.h - stageData.h) - imgHeight + δ;\n                const imgLeft = (widthDiff > 0 ? $(image).position().left : $(image).position().left < 0 ? $(image).position().left : 0) - δ;\n                const imgTop = (heightDiff > 0 ? $(image).position().top : $(image).position().top < 0 ? $(image).position().top : 0) + δ;\n                const imgLeft2 = (widthDiff2 > 0 ? $(image).position().left : $(image).position().left < 0 ? $(image).position().left : 0) - δ;\n                const imgTop2 = (heightDiff2 > 0 ? $(image).position().top : $(image).position().top < 0 ? $(image).position().top : 0) + δ;\n                const opts = {\n                    e: { left: widthDiff >= -δ ? (widthDiff - δ) / 2 + 'px' : imgLeft > widthDiff ? imgLeft + 'px' : widthDiff + 'px' },\n                    s: { top: heightDiff >= δ ? (heightDiff + δ) / 2 + 'px' : imgTop > heightDiff ? imgTop + 'px' : heightDiff + 'px' },\n                    se: {\n                        top: heightDiff >= δ ? (heightDiff + δ) / 2 + 'px' : imgTop > heightDiff ? imgTop + 'px' : heightDiff + 'px',\n                        left: widthDiff >= -δ ? (widthDiff - δ) / 2 + 'px' : imgLeft > widthDiff ? imgLeft + 'px' : widthDiff + 'px'\n                    },\n                    w: { left: widthDiff2 >= -δ ? (widthDiff2 - δ) / 2 + 'px' : imgLeft2 > widthDiff2 ? imgLeft2 + 'px' : widthDiff2 + 'px' },\n                    n: { top: heightDiff2 >= δ ? (heightDiff2 + δ) / 2 + 'px' : imgTop2 > heightDiff2 ? imgTop2 + 'px' : heightDiff2 + 'px' },\n                    nw: {\n                        top: heightDiff2 >= δ ? (heightDiff2 + δ) / 2 + 'px' : imgTop2 > heightDiff2 ? imgTop2 + 'px' : heightDiff2 + 'px',\n                        left: widthDiff2 >= -δ ? (widthDiff2 - δ) / 2 + 'px' : imgLeft2 > widthDiff2 ? imgLeft2 + 'px' : widthDiff2 + 'px'\n                    },\n                    ne: {\n                        top: heightDiff2 >= δ ? (heightDiff2 + δ) / 2 + 'px' : imgTop2 > heightDiff2 ? imgTop2 + 'px' : heightDiff2 + 'px',\n                        left: widthDiff >= -δ ? (widthDiff - δ) / 2 + 'px' : imgLeft > widthDiff ? imgLeft + 'px' : widthDiff + 'px'\n                    },\n                    sw: {\n                        top: heightDiff >= δ ? (heightDiff + δ) / 2 + 'px' : imgTop > heightDiff ? imgTop + 'px' : heightDiff + 'px',\n                        left: widthDiff2 >= -δ ? (widthDiff2 - δ) / 2 + 'px' : imgLeft2 > widthDiff2 ? imgLeft2 + 'px' : widthDiff2 + 'px'\n                    }\n                };\n                return opts[dir];\n            };\n            const dragStart = (dir, e) => {\n                e = e || window.event;\n                e.preventDefault();\n                isDragging = true;\n                Constants.PUBLIC_VARS['isResizing'] = true;\n                startX = e.type === 'touchstart' ? e.targetTouches[0].pageX : e.clientX;\n                startY = e.type === 'touchstart' ? e.targetTouches[0].pageY : e.clientY;\n                modalData = {\n                    w: $(modal).width(),\n                    h: $(modal).height(),\n                    l: $(modal).offset().left,\n                    t: $(modal).offset().top\n                };\n                stageData = {\n                    w: $(stage).width(),\n                    h: $(stage).height(),\n                    l: $(stage).offset().left,\n                    t: $(stage).offset().top\n                };\n                imageData = {\n                    w: $(image).width(),\n                    h: $(image).height(),\n                    l: $(image).position().left,\n                    t: $(image).position().top\n                };\n                δ = !this.isRotated ? 0 : (imageData.w - imageData.h) / 2;\n                imgWidth = !this.isRotated ? imageData.w : imageData.h;\n                imgHeight = !this.isRotated ? imageData.h : imageData.w;\n                direction = dir;\n                $(ELEMS_WITH_RESIZE_CURSOR).css('cursor', dir + '-resize');\n                Constants.$D.on(Constants.TOUCH_MOVE_EVENT + Constants.EVENT_NS, dragMove).on(Constants.TOUCH_END_EVENT + Constants.EVENT_NS, dragEnd);\n            };\n            const dragMove = e => {\n                e = e || window.event;\n                e.preventDefault();\n                if (isDragging && !this.isMaximized) {\n                    const endX = e.type === 'touchmove' ? e.targetTouches[0].pageX : e.clientX;\n                    const endY = e.type === 'touchmove' ? e.targetTouches[0].pageY : e.clientY;\n                    const relativeX = endX - startX;\n                    const relativeY = endY - startY;\n                    const modalOpts = getModalOpts(direction, relativeX, relativeY);\n                    $(modal).css(modalOpts);\n                    const imageOpts = getImageOpts(direction, relativeX, relativeY);\n                    $(image).css(imageOpts);\n                    this.isDoResize = true;\n                }\n            };\n            const dragEnd = () => {\n                Constants.$D.off(Constants.TOUCH_MOVE_EVENT + Constants.EVENT_NS, dragMove).off(Constants.TOUCH_END_EVENT + Constants.EVENT_NS, dragEnd);\n                if (Constants.PUBLIC_VARS['isResizing']) {\n                    Utilities.setGrabCursor({\n                        w: imgWidth,\n                        h: imgHeight\n                    }, {\n                        w: $(stage).width(),\n                        h: $(stage).height()\n                    }, stage);\n                }\n                isDragging = false;\n                Constants.PUBLIC_VARS['isResizing'] = false;\n                $(ELEMS_WITH_RESIZE_CURSOR).css('cursor', '');\n                const scale = this.getImageScaleToStage($(stage).width(), $(stage).height());\n                $.extend(this.imageData, {\n                    initWidth: this.img.width * scale,\n                    initHeight: this.img.height * scale,\n                    initLeft: ($(stage).width() - this.img.width * scale) / 2,\n                    initTop: ($(stage).height() - this.img.height * scale) / 2\n                });\n            };\n            $.each(resizableHandles, function (dir, handle) {\n                handle.on(Constants.TOUCH_START_EVENT + Constants.EVENT_NS, function (e) {\n                    dragStart(dir, e);\n                });\n            });\n            */\n            let self = this;\n            let resizer = new _Resizable($(modal)[0],{\n                handle : {\n                    border : {\n                        directions : {\n                            top: true, //n\n                            left: true, //w\n                            right: true, //e\n                            bottom: true, //s\n                            topLeft : true, // nw\n                            topRight : true, // ne\n                            bottomLeft : true, // sw\n                            bottomRight : true // se                         \n                        },\n                        classes : {\n                            all : `${ Constants.NS }-resizable-handle`,\n                            top : `${ Constants.NS }-resizable-handle-n`,\n                            left: `${ Constants.NS }-resizable-handle-w`,\n                            right: `${ Constants.NS }-resizable-handle-e`,\n                            bottom: `${ Constants.NS }-resizable-handle-s`, \n                            topLeft : `${ Constants.NS }-resizable-handle-nw`, \n                            topRight : `${ Constants.NS }-resizable-handle-ne`,\n                            bottomLeft : `${ Constants.NS }-resizable-handle-sw`,             \n                            bottomRight : `${ Constants.NS }-resizable-handle-se`                         \n                        }                        \n                    }\n                },\n                constraints : {\n                    minWidth,\n                    minHeight\n                },\n                started : function(){\n                    Constants.PUBLIC_VARS['isResizing'] = true;\n                },\n                moving : function(e) {\n                    const imageWidth = $(image).width();\n                    const imageHeight = $(image).height();\n                    const stageWidth = $(stage).width();\n                    const stageHeight = $(stage).height();\n                    const left = (stageWidth - imageWidth) /2;\n                    const top = (stageHeight- imageHeight) /2;\n                    $(image).css({\n                        left,\n                        top\n                    });\n                },\n                stopped :function () {\n                    Constants.PUBLIC_VARS['isResizing'] = false;\n                }\n            });\n        }\n    };\n});"]}