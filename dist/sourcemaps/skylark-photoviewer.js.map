{"version":3,"sources":["skylark-photoviewer.js"],"names":["define","$","draggable","resizable","movable","keyboard","title","modalWidth","modalHeight","fixedContent","fixedModalSize","initMaximized","gapThreshold","ratioThreshold","minRatio","maxRatio","headerToolbar","footerToolbar","icons","minimize","maximize","close","zoomIn","zoomOut","prev","next","fullscreen","actualSize","rotateLeft","rotateRight","i18n","multiInstances","initAnimation","fixedModalPos","zIndex","dragHandle","callbacks","beforeOpen","noop","opened","beforeClose","closed","beforeChange","changed","index","progressiveLoading","appendTo","customButtons","langx","browser","noder","geom","images","document","window","throttle","debounce","preloadImage","src","success","error","preload","then","data","imgs","requestFullscreen","exitFullscreen","getImageNameFromUrl","url","replace","hasScrollbar","getScrollbarWidth","scrollbarWidth","setGrabCursor","imageData","stageData","stage","isRotated","imageWidth","h","w","imageHeight","addClass","removeClass","supportTouch","support","tocuh","utilities","$W","$D","TOUCH_START_EVENT","TOUCH_MOVE_EVENT","TOUCH_END_EVENT","NS","CLICK_EVENT","RESIZE_EVENT","KEYDOWN_EVENT","WHEEL_EVENT","CLASS_NS","EVENT_NS","PUBLIC_VARS","isMoving","isResizing","datax","eventer","styler","plugins","interact","on","off","attr","removeAttr","pagePosition","height","Array","prototype","some","map","Movable","Plugin","inherit","klassName","pluginName","_construct","elm","options","updateWithTouchData","e","keys","i","changedTouches","split","length","updateWithMoveData","self","moveEl","handleEl","this","overrided","overlayDiv","startX","startY","originalPos","handle","auto","constraints","doc","startingCallback","starting","startedCallback","started","movingCallback","moving","stoppedCallback","stopped","move","button","stop","deltaX","screenX","deltaY","screenY","l","left","t","top","minX","maxX","minY","maxY","relativePosition","preventDefault","remove","cursor","docSize","getDocumentSize","ret","isPlainObject","size","css","createElement","position","width","opacity","append","body","_handleEl","register","_movable","Constants","[object Object]","modal","dragCancel","elemCancel","target","closest","isMaximized","image","hasClass","stageWidth","stageHeight","Utilities","ELEMS_WITH_RESIZE_CURSOR","minWidth","minHeight","resizableHandleE","resizableHandleW","resizableHandleS","resizableHandleN","resizableHandleSE","resizableHandleSW","resizableHandleNE","resizableHandleNW","resizableHandles","s","se","n","nw","ne","sw","isDragging","modalData","Î´","imgWidth","imgHeight","direction","dragStart","dir","event","type","targetTouches","pageX","clientX","pageY","clientY","offset","dragMove","dragEnd","endX","endY","relativeX","relativeY","modalOpts","offsetX","offsetY","modalLeft","modalTop","Math","max","getModalOpts","imageOpts","widthDiff","heightDiff","widthDiff2","heightDiff2","imgLeft","imgTop","imgLeft2","imgTop2","getImageOpts","isDoResize","scale","getImageScaleToStage","extend","initWidth","img","initHeight","initLeft","initTop","each","DEFAULTS","PhotoViewer","items","el","isArray","$el","isOpened","rotateAngle","init","opts","groupData","groupIndex","imgSrc","open","loadImage","$photoviewer","$stage","$image","toolbar","btns","btnsHTML","item","btnClass","indexOf","text","photoviewerHTML","_createBtns","_createTitle","_createTemplate","find","$title","$close","$maximize","$minimize","$zoomIn","$zoomOut","$actualSize","$fullscreen","$rotateLeft","$rotateRight","$prev","$next","eq","_addEvents","_addCustomButtonEvents","_triggerHook","overflow","padding-right","build","setModalPos","get","focus","winWidth","winHeight","scrollLeft","scrollTop","stageCSS","right","bottom","borderLeft","borderRight","borderTop","borderBottom","parseFloat","min","round","modalCSSObj","animate","setImageSize","ceil","imageLoaded","fadeIn","fn","err","hide","originalWidth","originalHeight","setModalSize","call","setImageTitle","html","step","jumpTo","delta","wheelDelta","detail","ratio","pointer","x","y","zoom","origin","zoomTo","imgData","newWidth","newHeight","newLeft","newTop","imgNewWidth","imgNewHeight","abs","angle","rotateTo","transform","resizeHandler","initModalLeft","initModalTop","keyCode","which","charCode","ctrlKey","metaKey","altKey","jump","rotate","wheel","_keydown","resize","btnKey","click","apply","main"],"mappings":"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","file":"../skylark-photoviewer.js","sourcesContent":["define('skylark-photoviewer/domq',['skylark-jquery'], function ($) {\n    'use strict';\n\n    return $;\n});\ndefine('skylark-photoviewer/defaults',[\n    './domq'\n], function ($) {\n    'use strict';\n    return {\n        draggable: true,\n        resizable: true,\n        movable: true,\n        keyboard: true,\n        title: true,\n        modalWidth: 320,\n        modalHeight: 320,\n        fixedContent: true,\n        fixedModalSize: false,\n        initMaximized: false,\n        gapThreshold: 0.02,\n        ratioThreshold: 0.1,\n        minRatio: 0.05,\n        maxRatio: 16,\n        headerToolbar: [\n            'maximize',\n            'close'\n        ],\n        footerToolbar: [\n            'zoomIn',\n            'zoomOut',\n            'prev',\n            'fullscreen',\n            'next',\n            'actualSize',\n            'rotateRight'\n        ],\n        icons: {\n            minimize: `<svg viewBox=\"0 0 24 24\" class=\"svg-inline-icon\">\n        <path fill=\"currentColor\" d=\"M20,14H4V10H20\"></path>\n      </svg>`,\n            maximize: `<svg viewBox=\"0 0 24 24\" class=\"svg-inline-icon\">\n        <path fill=\"currentColor\" d=\"M4,4H20V20H4V4M6,8V18H18V8H6Z\"></path>\n      </svg>`,\n            close: `<svg viewBox=\"0 0 24 24\" class=\"svg-inline-icon\">\n        <path fill=\"currentColor\" d=\"M13.46,12L19,17.54V19H17.54L12,13.46L6.46,19H5V17.54L10.54,12\n        L5,6.46V5H6.46L12,10.54L17.54,5H19V6.46L13.46,12Z\"></path>\n      </svg>`,\n            zoomIn: `<svg viewBox=\"0 0 24 24\" class=\"svg-inline-icon\">\n        <path fill=\"currentColor\" d=\"M15.5,14L20.5,19L19,20.5L14,15.5V14.71L13.73,14.43\n        C12.59,15.41 11.11,16 9.5,16A6.5,6.5 0 0,1 3,9.5A6.5,6.5 0 0,1 9.5,3A6.5,6.5 0 0,1 16,9.5\n        C16,11.11 15.41,12.59 14.43,13.73L14.71,14H15.5M9.5,14C12,14 14,12 14,9.5C14,7 12,5 9.5,5\n        C7,5 5,7 5,9.5C5,12 7,14 9.5,14M12,10H10V12H9V10H7V9H9V7H10V9H12V10Z\"></path>\n      </svg>`,\n            zoomOut: `<svg viewBox=\"0 0 24 24\" class=\"svg-inline-icon\">\n        <path fill=\"currentColor\" d=\"M15.5,14H14.71L14.43,13.73C15.41,12.59 16,11.11 16,9.5\n        A6.5,6.5 0 0,0 9.5,3A6.5,6.5 0 0,0 3,9.5A6.5,6.5 0 0,0 9.5,16\n        C11.11,16 12.59,15.41 13.73,14.43L14,14.71V15.5L19,20.5L20.5,19L15.5,14M9.5,14\n        C7,14 5,12 5,9.5C5,7 7,5 9.5,5C12,5 14,7 14,9.5C14,12 12,14 9.5,14M7,9H12V10H7V9Z\"></path>\n      </svg>`,\n            prev: `<svg viewBox=\"0 0 24 24\" class=\"svg-inline-icon\">\n        <path fill=\"currentColor\" d=\"M6,18V6H8V18H6M9.5,12L18,6V18L9.5,12Z\"></path>\n      </svg>`,\n            next: `<svg viewBox=\"0 0 24 24\" class=\"svg-inline-icon\">\n        <path fill=\"currentColor\" d=\"M16,18H18V6H16M6,18L14.5,12L6,6V18Z\"></path>\n      </svg>`,\n            fullscreen: `<svg viewBox=\"0 0 24 24\" class=\"svg-inline-icon\">\n        <path fill=\"currentColor\" d=\"M8.5,12.5L11,15.5L14.5,11L19,17H5M23,18V6A2,2 0 0,0 21,4H3\n        A2,2 0 0,0 1,6V18A2,2 0 0,0 3,20H21A2,2 0 0,0 23,18Z\"></path>\n      </svg>`,\n            actualSize: `<svg viewBox=\"0 0 24 24\" class=\"svg-inline-icon\">\n        <path fill=\"currentColor\" d=\"M9.5,13.09L10.91,14.5L6.41,19H10V21H3V14H5V17.59L9.5,13.09\n        M10.91,9.5L9.5,10.91L5,6.41V10H3V3H10V5H6.41L10.91,9.5M14.5,13.09L19,17.59V14H21V21H14V19\n        H17.59L13.09,14.5L14.5,13.09M13.09,9.5L17.59,5H14V3H21V10H19V6.41L14.5,10.91\n        L13.09,9.5Z\"></path>\n      </svg>`,\n            rotateLeft: `<svg viewBox=\"0 0 24 24\" class=\"svg-inline-icon\">\n        <path fill=\"currentColor\" d=\"M13,4.07V1L8.45,5.55L13,10V6.09C15.84,6.57 18,9.03 18,12\n        C18,14.97 15.84,17.43 13,17.91V19.93C16.95,19.44 20,16.08 20,12C20,7.92 16.95,4.56 13,4.07\n        M7.1,18.32C8.26,19.22 9.61,19.76 11,19.93V17.9C10.13,17.75 9.29,17.41 8.54,16.87L7.1,18.32\n        M6.09,13H4.07C4.24,14.39 4.79,15.73 5.69,16.89L7.1,15.47C6.58,14.72 6.23,13.88 6.09,13\n        M7.11,8.53L5.7,7.11C4.8,8.27 4.24,9.61 4.07,11H6.09C6.23,10.13 6.58,9.28 7.11,8.53Z\"></path>\n      </svg>`,\n            rotateRight: `<svg viewBox=\"0 0 24 24\" class=\"svg-inline-icon\">\n        <path fill=\"currentColor\" d=\"M16.89,15.5L18.31,16.89C19.21,15.73 19.76,14.39 19.93,13H17.91\n        C17.77,13.87 17.43,14.72 16.89,15.5M13,17.9V19.92C14.39,19.75 15.74,19.21 16.9,18.31\n        L15.46,16.87C14.71,17.41 13.87,17.76 13,17.9M19.93,11C19.76,9.61 19.21,8.27 18.31,7.11\n        L16.89,8.53C17.43,9.28 17.77,10.13 17.91,11M15.55,5.55L11,1V4.07C7.06,4.56 4,7.92 4,12\n        C4,16.08 7.05,19.44 11,19.93V17.91C8.16,17.43 6,14.97 6,12C6,9.03 8.16,6.57 11,6.09V10\n        L15.55,5.55Z\"></path>\n      </svg>`\n        },\n        i18n: {\n            minimize: 'minimize',\n            maximize: 'maximize',\n            close: 'close',\n            zoomIn: 'zoom-in (+)',\n            zoomOut: 'zoom-out (-)',\n            prev: 'prev (\\u2190)',\n            next: 'next (\\u2192)',\n            fullscreen: 'fullscreen',\n            actualSize: 'actual-size (Ctrl+Alt+0)',\n            rotateLeft: 'rotate-left (Ctrl+,)',\n            rotateRight: 'rotate-right (Ctrl+.)'\n        },\n        multiInstances: true,\n        initAnimation: true,\n        fixedModalPos: false,\n        zIndex: 1090,\n        dragHandle: false,\n        callbacks: {\n            beforeOpen: $.noop,\n            opened: $.noop,\n            beforeClose: $.noop,\n            closed: $.noop,\n            beforeChange: $.noop,\n            changed: $.noop\n        },\n        index: 0,\n        progressiveLoading: true,\n        appendTo: 'body',\n        customButtons: {}\n    };\n});\ndefine('skylark-photoviewer/utilities',[\n    \"skylark-langx\",\n    \"skylark-domx-browser\",\n    \"skylark-domx-noder\",\n    \"skylark-domx-geom\",\n    \"skylark-domx-images\"\n],function (langx,browser,noder,geom,images) {\n    'use strict';\n    const document = window.document;\n\n    /*\n    function throttle(fn, delay) {\n        let timer = null;\n        return function () {\n            const context = this;\n            const args = arguments;\n            clearTimeout(timer);\n            timer = setTimeout(function () {\n                fn.apply(context, args);\n            }, delay);\n        };\n    }\n    function preloadImage(src, success, error) {\n        const img = new Image();\n        img.onload = function () {\n            success(img);\n        };\n        img.onerror = function () {\n            error(img);\n        };\n        img.src = src;\n    }\n    function requestFullscreen(element) {\n        if (element.requestFullscreen) {\n            element.requestFullscreen();\n        } else if (element.mozRequestFullScreen) {\n            element.mozRequestFullScreen();\n        } else if (element.webkitRequestFullscreen) {\n            element.webkitRequestFullscreen();\n        } else if (element.msRequestFullscreen) {\n            element.msRequestFullscreen();\n        }\n    }\n    function exitFullscreen() {\n        if (document.exitFullscreen) {\n            document.exitFullscreen();\n        } else if (document.mozCancelFullScreen) {\n            document.mozCancelFullScreen();\n        } else if (document.webkitExitFullscreen) {\n            document.webkitExitFullscreen();\n        }\n    }\n\n\n    function getScrollbarWidth() {\n        const scrollDiv = document.createElement('div');\n        scrollDiv.style.cssText = 'width: 99px; height: 99px; overflow: scroll; position: absolute; top: -9999px;';\n        document.body.appendChild(scrollDiv);\n        const scrollbarWidth = scrollDiv.offsetWidth - scrollDiv.clientWidth;\n        document.body.removeChild(scrollDiv);\n        return scrollbarWidth;\n    }\n\n    function hasScrollbar() {\n        return document.body.scrollHeight > (window.innerHeight || document.documentElement.clientHeight);\n    }\n\n\n    function supportTouch() {\n        return !!('ontouchstart' in window || window.DocumentTouch && document instanceof window.DocumentTouch);\n    }\n\n    */\n \n\n     function setGrabCursor(imageData, stageData, stage, isRotated) {\n        const imageWidth = !isRotated ? imageData.w : imageData.h;\n        const imageHeight = !isRotated ? imageData.h : imageData.w;\n        if (imageHeight > stageData.h || imageWidth > stageData.w) {\n            stage.addClass('is-grab');\n        }\n        if (imageHeight <= stageData.h && imageWidth <= stageData.w) {\n            stage.removeClass('is-grab');\n        }\n    }\n\n    function getImageNameFromUrl(url) {\n        const reg = /^.*?\\/*([^/?]*)\\.[a-z]+(\\?.+|$)/gi;\n        const txt = url.replace(reg, '$1');\n        return txt;\n    }\n\n    return {\n        document: document,\n        throttle: langx.debounce,\n        preloadImage: function preloadImage(src, success, error) {\n            images.preload(src).then(function(data){\n                success(data.imgs[0]);\n            },error);\n        },\n        requestFullscreen: noder.fullscreen,\n        exitFullscreen: noder.fullscreen,\n        getImageNameFromUrl: getImageNameFromUrl,\n        hasScrollbar: geom.hasScrollbar,\n        getScrollbarWidth: geom.scrollbarWidth,\n        setGrabCursor: setGrabCursor,\n        supportTouch: function() {\n            return browser.support.tocuh;\n        }\n    }\n});\ndefine('skylark-photoviewer/constants',[\n    './domq',\n    './utilities'\n], function ($, utilities) {\n    'use strict';\n    const $W = $(window);\n    const $D = $(utilities.document);\n    const CLICK_EVENT = 'click';\n    const RESIZE_EVENT = 'resize';\n    const KEYDOWN_EVENT = 'keydown';\n    const WHEEL_EVENT = 'wheel mousewheel DOMMouseScroll';\n    const TOUCH_START_EVENT = utilities.supportTouch() ? 'touchstart' : 'mousedown';\n    const TOUCH_MOVE_EVENT = utilities.supportTouch() ? 'touchmove' : 'mousemove';\n    const TOUCH_END_EVENT = utilities.supportTouch() ? 'touchend' : 'mouseup';\n    const NS = 'photoviewer';\n    const CLASS_NS = '.' + NS;\n    const EVENT_NS = '.' + NS;\n    const PUBLIC_VARS = {\n        isMoving: false,\n        isResizing: false,\n        zIndex: 0\n    };\n    return {\n        $W: $W,\n        $D: $D,\n        CLICK_EVENT: CLICK_EVENT,\n        RESIZE_EVENT: RESIZE_EVENT,\n        KEYDOWN_EVENT: KEYDOWN_EVENT,\n        WHEEL_EVENT: WHEEL_EVENT,\n        TOUCH_START_EVENT: TOUCH_START_EVENT,\n        TOUCH_MOVE_EVENT: TOUCH_MOVE_EVENT,\n        TOUCH_END_EVENT: TOUCH_END_EVENT,\n        NS: NS,\n        CLASS_NS: CLASS_NS,\n        EVENT_NS: EVENT_NS,\n        PUBLIC_VARS: PUBLIC_VARS\n    };\n});\ndefine('skylark-domx-plugins-interact/movable',[\r\n    \"skylark-langx/langx\",\r\n    \"skylark-domx-noder\",\r\n    \"skylark-domx-data\",\r\n    \"skylark-domx-geom\",\r\n    \"skylark-domx-eventer\",\r\n    \"skylark-domx-styler\",\r\n    \"skylark-domx-plugins\",\r\n    \"./interact\"\r\n],function(langx,noder,datax,geom,eventer,styler,plugins,interact){\r\n    var on = eventer.on,\r\n        off = eventer.off,\r\n        attr = datax.attr,\r\n        removeAttr = datax.removeAttr,\r\n        offset = geom.pagePosition,\r\n        addClass = styler.addClass,\r\n        height = geom.height,\r\n        some = Array.prototype.some,\r\n        map = Array.prototype.map;\r\n\r\n    var Movable = plugins.Plugin.inherit({\r\n        klassName: \"Movable\",\r\n\r\n        pluginName : \"lark.movable\",\r\n\r\n\r\n        _construct : function (elm, options) {\r\n            this.overrided(elm,options);\r\n\r\n\r\n\r\n            function updateWithTouchData(e) {\r\n                var keys, i;\r\n\r\n                if (e.changedTouches) {\r\n                    keys = \"screenX screenY pageX pageY clientX clientY\".split(' ');\r\n                    for (i = 0; i < keys.length; i++) {\r\n                        e[keys[i]] = e.changedTouches[0][keys[i]];\r\n                    }\r\n                }\r\n            }\r\n\r\n            function updateWithMoveData(e) {\r\n                e.movable = self;\r\n                e.moveEl = elm;\r\n                e.handleEl = handleEl;\r\n            }\r\n\r\n            options = this.options;\r\n            var self = this,\r\n                handleEl = options.handle || elm,\r\n                auto = options.auto === false ? false : true,\r\n                constraints = options.constraints,\r\n                overlayDiv,\r\n                doc = options.document || document,\r\n                downButton,\r\n                start,\r\n                stop,\r\n                drag,\r\n                startX,\r\n                startY,\r\n                originalPos,\r\n                size,\r\n                startingCallback = options.starting,\r\n                startedCallback = options.started,\r\n                movingCallback = options.moving,\r\n                stoppedCallback = options.stopped,\r\n\r\n                start = function(e) {\r\n                    var docSize = geom.getDocumentSize(doc),\r\n                        cursor;\r\n\r\n                    updateWithTouchData(e);\r\n                    updateWithMoveData(e);\r\n\r\n                    if (startingCallback) {\r\n                        var ret = startingCallback(e)\r\n                        if ( ret === false) {\r\n                            return;\r\n                        } else if (langx.isPlainObject(ret)) {\r\n                            if (ret.constraints) {\r\n                                constraints = ret.constraints;\r\n                            }\r\n                            if (ret.started) {\r\n                                startedCallback = ret.started;\r\n                            }\r\n                            if (ret.moving) {\r\n                                movingCallback = ret.moving;\r\n                            }                            \r\n                            if (ret.stopped) {\r\n                                stoppedCallback = ret.stopped;\r\n                            }     \r\n                        }\r\n                    }\r\n\r\n                    e.preventDefault();\r\n\r\n                    downButton = e.button;\r\n                    //handleEl = getHandleEl();\r\n                    startX = e.screenX;\r\n                    startY = e.screenY;\r\n\r\n                    originalPos = geom.relativePosition(elm);\r\n                    size = geom.size(elm);\r\n\r\n                    // Grab cursor from handle so we can place it on overlay\r\n                    cursor = styler.css(handleEl, \"curosr\");\r\n\r\n                    overlayDiv = noder.createElement(\"div\");\r\n                    styler.css(overlayDiv, {\r\n                        position: \"absolute\",\r\n                        top: 0,\r\n                        left: 0,\r\n                        width: docSize.width,\r\n                        height: docSize.height,\r\n                        zIndex: 0x7FFFFFFF,\r\n                        opacity: 0.0001,\r\n                        cursor: cursor\r\n                    });\r\n                    noder.append(doc.body, overlayDiv);\r\n\r\n                    eventer.on(doc, \"mousemove touchmove\", move).on(doc, \"mouseup touchend\", stop);\r\n\r\n                    if (startedCallback) {\r\n                        startedCallback(e);\r\n                    }\r\n                },\r\n\r\n                move = function(e) {\r\n                    updateWithTouchData(e);\r\n                    updateWithMoveData(e);\r\n\r\n                    if (e.button !== 0) {\r\n                        return stop(e);\r\n                    }\r\n\r\n                    e.deltaX = e.screenX - startX;\r\n                    e.deltaY = e.screenY - startY;\r\n\r\n                    if (auto) {\r\n                        var l = originalPos.left + e.deltaX,\r\n                            t = originalPos.top + e.deltaY;\r\n                        if (constraints) {\r\n\r\n                            if (l < constraints.minX) {\r\n                                l = constraints.minX;\r\n                            }\r\n\r\n                            if (l > constraints.maxX) {\r\n                                l = constraints.maxX;\r\n                            }\r\n\r\n                            if (t < constraints.minY) {\r\n                                t = constraints.minY;\r\n                            }\r\n\r\n                            if (t > constraints.maxY) {\r\n                                t = constraints.maxY;\r\n                            }\r\n                        }\r\n                    }\r\n\r\n                    geom.relativePosition(elm, {\r\n                        left: l,\r\n                        top: t\r\n                    })\r\n\r\n                    e.preventDefault();\r\n                    if (movingCallback) {\r\n                        movingCallback(e);\r\n                    }\r\n                },\r\n\r\n                stop = function(e) {\r\n                    updateWithTouchData(e);\r\n\r\n                    eventer.off(doc, \"mousemove touchmove\", move).off(doc, \"mouseup touchend\", stop);\r\n\r\n                    noder.remove(overlayDiv);\r\n\r\n                    if (stoppedCallback) {\r\n                        stoppedCallback(e);\r\n                    }\r\n                };\r\n\r\n            eventer.on(handleEl, \"mousedown touchstart\", start);\r\n\r\n            this._handleEl = handleEl;\r\n\r\n        },\r\n\r\n        remove : function() {\r\n            eventer.off(this._handleEl);\r\n        }\r\n    });\r\n\r\n    plugins.register(Movable,\"movable\");\r\n\r\n    return interact.Movable = Movable;\r\n});\r\n\ndefine('skylark-photoviewer/draggable',[\n    \"skylark-domx-plugins-interact/movable\",\n    './domq',\n    './constants'\n], function (_movable,$, Constants) {\n    'use strict';\n    return {\n        draggable(modal, dragHandle, dragCancel) {\n            /*\n            let isDragging = false;\n            let startX = 0;\n            let startY = 0;\n            let left = 0;\n            let top = 0;\n            const dragStart = e => {\n                e = e || window.event;\n                modal.get(0).focus();\n                const elemCancel = $(e.target).closest(dragCancel);\n                if (elemCancel.length) {\n                    return true;\n                }\n                if (this.options.multiInstances) {\n                    modal.css('z-index', ++Constants.PUBLIC_VARS['zIndex']);\n                }\n                isDragging = true;\n                startX = e.type === 'touchstart' ? e.targetTouches[0].pageX : e.clientX;\n                startY = e.type === 'touchstart' ? e.targetTouches[0].pageY : e.clientY;\n                left = $(modal).offset().left;\n                top = $(modal).offset().top;\n                Constants.$D.on(Constants.TOUCH_MOVE_EVENT + Constants.EVENT_NS, dragMove).on(Constants.TOUCH_END_EVENT + Constants.EVENT_NS, dragEnd);\n            };\n            const dragMove = e => {\n                e = e || window.event;\n                e.preventDefault();\n                if (isDragging && !Constants.PUBLIC_VARS['isMoving'] && !Constants.PUBLIC_VARS['isResizing'] && !this.isMaximized) {\n                    const endX = e.type === 'touchmove' ? e.targetTouches[0].pageX : e.clientX;\n                    const endY = e.type === 'touchmove' ? e.targetTouches[0].pageY : e.clientY;\n                    const relativeX = endX - startX;\n                    const relativeY = endY - startY;\n                    $(modal).css({\n                        left: relativeX + left + 'px',\n                        top: relativeY + top + 'px'\n                    });\n                }\n            };\n            const dragEnd = () => {\n                Constants.$D.off(Constants.TOUCH_MOVE_EVENT + Constants.EVENT_NS, dragMove).off(Constants.TOUCH_END_EVENT + Constants.EVENT_NS, dragEnd);\n                isDragging = false;\n            };\n            $(dragHandle).on(Constants.TOUCH_START_EVENT + Constants.EVENT_NS, dragStart);\n            */\n            var self = this;\n            _movable($(modal)[0],{\n                handle : $(dragHandle)[0],\n                starting : function(e) {\n                    const elemCancel = $(e.target).closest(dragCancel);\n                    if (elemCancel.length) {\n                        return false;\n                    }\n                    if (Constants.PUBLIC_VARS['isResizing'] || self.isMaximized) {\n                        return false;\n                    }\n\n                    return true;\n                }\n            });\n        }\n    };\n});\ndefine('skylark-photoviewer/movable',[\n    \"skylark-domx-eventer\",\n    \"skylark-domx-plugins-interact/movable\",\n    './domq',\n    './constants'\n], function (eventer,_movable,$, Constants) {\n    'use strict';\n    const ELEMS_WITH_GRABBING_CURSOR = `html, body, .${ Constants.NS }-modal, .${ Constants.NS }-stage, .${ Constants.NS }-button, .${ Constants.NS }-resizable-handle`;\n    return {\n        movable(stage, image) {\n            /*\n            let isDragging = false;\n            let startX = 0;\n            let startY = 0;\n            let left = 0;\n            let top = 0;\n            let widthDiff = 0;\n            let heightDiff = 0;\n            let Î´ = 0;\n            const dragStart = e => {\n                e = e || window.event;\n                e.preventDefault();\n                const imageWidth = $(image).width();\n                const imageHeight = $(image).height();\n                const stageWidth = $(stage).width();\n                const stageHeight = $(stage).height();\n                startX = e.type === 'touchstart' ? e.targetTouches[0].pageX : e.clientX;\n                startY = e.type === 'touchstart' ? e.targetTouches[0].pageY : e.clientY;\n                Î´ = !this.isRotated ? 0 : (imageWidth - imageHeight) / 2;\n                widthDiff = !this.isRotated ? imageWidth - stageWidth : imageHeight - stageWidth;\n                heightDiff = !this.isRotated ? imageHeight - stageHeight : imageWidth - stageHeight;\n                isDragging = widthDiff > 0 || heightDiff > 0 ? true : false;\n                Constants.PUBLIC_VARS['isMoving'] = widthDiff > 0 || heightDiff > 0 ? true : false;\n                left = $(image).position().left - Î´;\n                top = $(image).position().top + Î´;\n                if (stage.hasClass('is-grab')) {\n                    $(ELEMS_WITH_GRABBING_CURSOR).addClass('is-grabbing');\n                }\n                Constants.$D.on(Constants.TOUCH_MOVE_EVENT + Constants.EVENT_NS, dragMove).on(Constants.TOUCH_END_EVENT + Constants.EVENT_NS, dragEnd);\n            };\n            const dragMove = e => {\n                e = e || window.event;\n                e.preventDefault();\n                if (isDragging) {\n                    const endX = e.type === 'touchmove' ? e.targetTouches[0].pageX : e.clientX;\n                    const endY = e.type === 'touchmove' ? e.targetTouches[0].pageY : e.clientY;\n                    const relativeX = endX - startX;\n                    const relativeY = endY - startY;\n                    let newLeft = relativeX + left;\n                    let newTop = relativeY + top;\n                    if (heightDiff > 0) {\n                        if (relativeY + top > Î´) {\n                            newTop = Î´;\n                        } else if (relativeY + top < -heightDiff + Î´) {\n                            newTop = -heightDiff + Î´;\n                        }\n                    } else {\n                        newTop = top;\n                    }\n                    if (widthDiff > 0) {\n                        if (relativeX + left > -Î´) {\n                            newLeft = -Î´;\n                        } else if (relativeX + left < -widthDiff - Î´) {\n                            newLeft = -widthDiff - Î´;\n                        }\n                    } else {\n                        newLeft = left;\n                    }\n                    $(image).css({\n                        left: newLeft + 'px',\n                        top: newTop + 'px'\n                    });\n                    $.extend(this.imageData, {\n                        left: newLeft,\n                        top: newTop\n                    });\n                }\n            };\n            const dragEnd = () => {\n                Constants.$D.off(Constants.TOUCH_MOVE_EVENT + Constants.EVENT_NS, dragMove).off(Constants.TOUCH_END_EVENT + Constants.EVENT_NS, dragEnd);\n                isDragging = false;\n                Constants.PUBLIC_VARS['isMoving'] = false;\n                $(ELEMS_WITH_GRABBING_CURSOR).removeClass('is-grabbing');\n            };\n            $(stage).on(Constants.TOUCH_START_EVENT + Constants.EVENT_NS, dragStart);\n            */\n            \n            \n\n            return _movable(image[0],{\n                starting : function(e) {\n                    if (stage.hasClass('is-grab')) {\n\n                    } else {\n                        return false;\n                    }\n                    const imageWidth = $(image).width();\n                    const imageHeight = $(image).height();\n                    const stageWidth = $(stage).width();\n                    const stageHeight = $(stage).height();\n                    let minX,minY,maxX,maxY;\n\n                    if (stageWidth>=imageWidth) {\n                        minX=maxX=(stageWidth-imageWidth) / 2;\n                    } else {\n                        minX = stageWidth - imageWidth;\n                        maxX = 0;\n                    }\n\n                    if (stageHeight>=imageHeight) {\n                        minY=maxY=(stageHeight-imageHeight) / 2;\n                    } else {\n                        minY = stageHeight - imageHeight;\n                        maxY = 0;\n                    }\n\n                    return {\n                        constraints : {\n                             minX,\n                            maxX,\n                            minY,\n                            maxY\n                        }\n                    };\n                },\n                started : function(e) {\n                    eventer.stop(e);\n                }\n            });\n        }\n    };\n});\ndefine('skylark-photoviewer/resizable',[\n    './domq',\n    './constants',\n    './utilities'\n], function ($, Constants, Utilities) {\n    'use strict';\n    const ELEMS_WITH_RESIZE_CURSOR = `html, body, .${ Constants.NS }-modal, .${ Constants.NS }-stage, .${ Constants.NS }-button`;\n    return {\n        resizable(modal, stage, image, minWidth, minHeight) {\n            const resizableHandleE = $(`<div class=\"${ Constants.NS }-resizable-handle ${ Constants.NS }-resizable-handle-e\"></div>`);\n            const resizableHandleW = $(`<div class=\"${ Constants.NS }-resizable-handle ${ Constants.NS }-resizable-handle-w\"></div>`);\n            const resizableHandleS = $(`<div class=\"${ Constants.NS }-resizable-handle ${ Constants.NS }-resizable-handle-s\"></div>`);\n            const resizableHandleN = $(`<div class=\"${ Constants.NS }-resizable-handle ${ Constants.NS }-resizable-handle-n\"></div>`);\n            const resizableHandleSE = $(`<div class=\"${ Constants.NS }-resizable-handle ${ Constants.NS }-resizable-handle-se\"></div>`);\n            const resizableHandleSW = $(`<div class=\"${ Constants.NS }-resizable-handle ${ Constants.NS }-resizable-handle-sw\"></div>`);\n            const resizableHandleNE = $(`<div class=\"${ Constants.NS }-resizable-handle ${ Constants.NS }-resizable-handle-ne\"></div>`);\n            const resizableHandleNW = $(`<div class=\"${ Constants.NS }-resizable-handle ${ Constants.NS }-resizable-handle-nw\"></div>`);\n            const resizableHandles = {\n                e: resizableHandleE,\n                s: resizableHandleS,\n                se: resizableHandleSE,\n                n: resizableHandleN,\n                w: resizableHandleW,\n                nw: resizableHandleNW,\n                ne: resizableHandleNE,\n                sw: resizableHandleSW\n            };\n            $(modal).append(resizableHandleE, resizableHandleW, resizableHandleS, resizableHandleN, resizableHandleSE, resizableHandleSW, resizableHandleNE, resizableHandleNW);\n            let isDragging = false;\n            let startX = 0;\n            let startY = 0;\n            let modalData = {\n                w: 0,\n                h: 0,\n                l: 0,\n                t: 0\n            };\n            let stageData = {\n                w: 0,\n                h: 0,\n                l: 0,\n                t: 0\n            };\n            let imageData = {\n                w: 0,\n                h: 0,\n                l: 0,\n                t: 0\n            };\n            let Î´ = 0;\n            let imgWidth = 0;\n            let imgHeight = 0;\n            let direction = '';\n            const getModalOpts = function (dir, offsetX, offsetY) {\n                const modalLeft = -offsetX + modalData.w > minWidth ? offsetX + modalData.l : modalData.l + modalData.w - minWidth;\n                const modalTop = -offsetY + modalData.h > minHeight ? offsetY + modalData.t : modalData.t + modalData.h - minHeight;\n                const opts = {\n                    e: { width: Math.max(offsetX + modalData.w, minWidth) + 'px' },\n                    s: { height: Math.max(offsetY + modalData.h, minHeight) + 'px' },\n                    se: {\n                        width: Math.max(offsetX + modalData.w, minWidth) + 'px',\n                        height: Math.max(offsetY + modalData.h, minHeight) + 'px'\n                    },\n                    w: {\n                        width: Math.max(-offsetX + modalData.w, minWidth) + 'px',\n                        left: modalLeft + 'px'\n                    },\n                    n: {\n                        height: Math.max(-offsetY + modalData.h, minHeight) + 'px',\n                        top: modalTop + 'px'\n                    },\n                    nw: {\n                        width: Math.max(-offsetX + modalData.w, minWidth) + 'px',\n                        height: Math.max(-offsetY + modalData.h, minHeight) + 'px',\n                        top: modalTop + 'px',\n                        left: modalLeft + 'px'\n                    },\n                    ne: {\n                        width: Math.max(offsetX + modalData.w, minWidth) + 'px',\n                        height: Math.max(-offsetY + modalData.h, minHeight) + 'px',\n                        top: modalTop + 'px'\n                    },\n                    sw: {\n                        width: Math.max(-offsetX + modalData.w, minWidth) + 'px',\n                        height: Math.max(offsetY + modalData.h, minHeight) + 'px',\n                        left: modalLeft + 'px'\n                    }\n                };\n                return opts[dir];\n            };\n            const getImageOpts = function (dir, offsetX, offsetY) {\n                const widthDiff = offsetX + modalData.w > minWidth ? stageData.w - imgWidth + offsetX - Î´ : minWidth - (modalData.w - stageData.w) - imgWidth - Î´;\n                const heightDiff = offsetY + modalData.h > minHeight ? stageData.h - imgHeight + offsetY + Î´ : minHeight - (modalData.h - stageData.h) - imgHeight + Î´;\n                const widthDiff2 = -offsetX + modalData.w > minWidth ? stageData.w - imgWidth - offsetX - Î´ : minWidth - (modalData.w - stageData.w) - imgWidth - Î´;\n                const heightDiff2 = -offsetY + modalData.h > minHeight ? stageData.h - imgHeight - offsetY + Î´ : minHeight - (modalData.h - stageData.h) - imgHeight + Î´;\n                const imgLeft = (widthDiff > 0 ? $(image).position().left : $(image).position().left < 0 ? $(image).position().left : 0) - Î´;\n                const imgTop = (heightDiff > 0 ? $(image).position().top : $(image).position().top < 0 ? $(image).position().top : 0) + Î´;\n                const imgLeft2 = (widthDiff2 > 0 ? $(image).position().left : $(image).position().left < 0 ? $(image).position().left : 0) - Î´;\n                const imgTop2 = (heightDiff2 > 0 ? $(image).position().top : $(image).position().top < 0 ? $(image).position().top : 0) + Î´;\n                const opts = {\n                    e: { left: widthDiff >= -Î´ ? (widthDiff - Î´) / 2 + 'px' : imgLeft > widthDiff ? imgLeft + 'px' : widthDiff + 'px' },\n                    s: { top: heightDiff >= Î´ ? (heightDiff + Î´) / 2 + 'px' : imgTop > heightDiff ? imgTop + 'px' : heightDiff + 'px' },\n                    se: {\n                        top: heightDiff >= Î´ ? (heightDiff + Î´) / 2 + 'px' : imgTop > heightDiff ? imgTop + 'px' : heightDiff + 'px',\n                        left: widthDiff >= -Î´ ? (widthDiff - Î´) / 2 + 'px' : imgLeft > widthDiff ? imgLeft + 'px' : widthDiff + 'px'\n                    },\n                    w: { left: widthDiff2 >= -Î´ ? (widthDiff2 - Î´) / 2 + 'px' : imgLeft2 > widthDiff2 ? imgLeft2 + 'px' : widthDiff2 + 'px' },\n                    n: { top: heightDiff2 >= Î´ ? (heightDiff2 + Î´) / 2 + 'px' : imgTop2 > heightDiff2 ? imgTop2 + 'px' : heightDiff2 + 'px' },\n                    nw: {\n                        top: heightDiff2 >= Î´ ? (heightDiff2 + Î´) / 2 + 'px' : imgTop2 > heightDiff2 ? imgTop2 + 'px' : heightDiff2 + 'px',\n                        left: widthDiff2 >= -Î´ ? (widthDiff2 - Î´) / 2 + 'px' : imgLeft2 > widthDiff2 ? imgLeft2 + 'px' : widthDiff2 + 'px'\n                    },\n                    ne: {\n                        top: heightDiff2 >= Î´ ? (heightDiff2 + Î´) / 2 + 'px' : imgTop2 > heightDiff2 ? imgTop2 + 'px' : heightDiff2 + 'px',\n                        left: widthDiff >= -Î´ ? (widthDiff - Î´) / 2 + 'px' : imgLeft > widthDiff ? imgLeft + 'px' : widthDiff + 'px'\n                    },\n                    sw: {\n                        top: heightDiff >= Î´ ? (heightDiff + Î´) / 2 + 'px' : imgTop > heightDiff ? imgTop + 'px' : heightDiff + 'px',\n                        left: widthDiff2 >= -Î´ ? (widthDiff2 - Î´) / 2 + 'px' : imgLeft2 > widthDiff2 ? imgLeft2 + 'px' : widthDiff2 + 'px'\n                    }\n                };\n                return opts[dir];\n            };\n            const dragStart = (dir, e) => {\n                e = e || window.event;\n                e.preventDefault();\n                isDragging = true;\n                Constants.PUBLIC_VARS['isResizing'] = true;\n                startX = e.type === 'touchstart' ? e.targetTouches[0].pageX : e.clientX;\n                startY = e.type === 'touchstart' ? e.targetTouches[0].pageY : e.clientY;\n                modalData = {\n                    w: $(modal).width(),\n                    h: $(modal).height(),\n                    l: $(modal).offset().left,\n                    t: $(modal).offset().top\n                };\n                stageData = {\n                    w: $(stage).width(),\n                    h: $(stage).height(),\n                    l: $(stage).offset().left,\n                    t: $(stage).offset().top\n                };\n                imageData = {\n                    w: $(image).width(),\n                    h: $(image).height(),\n                    l: $(image).position().left,\n                    t: $(image).position().top\n                };\n                Î´ = !this.isRotated ? 0 : (imageData.w - imageData.h) / 2;\n                imgWidth = !this.isRotated ? imageData.w : imageData.h;\n                imgHeight = !this.isRotated ? imageData.h : imageData.w;\n                direction = dir;\n                $(ELEMS_WITH_RESIZE_CURSOR).css('cursor', dir + '-resize');\n                Constants.$D.on(Constants.TOUCH_MOVE_EVENT + Constants.EVENT_NS, dragMove).on(Constants.TOUCH_END_EVENT + Constants.EVENT_NS, dragEnd);\n            };\n            const dragMove = e => {\n                e = e || window.event;\n                e.preventDefault();\n                if (isDragging && !this.isMaximized) {\n                    const endX = e.type === 'touchmove' ? e.targetTouches[0].pageX : e.clientX;\n                    const endY = e.type === 'touchmove' ? e.targetTouches[0].pageY : e.clientY;\n                    const relativeX = endX - startX;\n                    const relativeY = endY - startY;\n                    const modalOpts = getModalOpts(direction, relativeX, relativeY);\n                    $(modal).css(modalOpts);\n                    const imageOpts = getImageOpts(direction, relativeX, relativeY);\n                    $(image).css(imageOpts);\n                    this.isDoResize = true;\n                }\n            };\n            const dragEnd = () => {\n                Constants.$D.off(Constants.TOUCH_MOVE_EVENT + Constants.EVENT_NS, dragMove).off(Constants.TOUCH_END_EVENT + Constants.EVENT_NS, dragEnd);\n                if (Constants.PUBLIC_VARS['isResizing']) {\n                    Utilities.setGrabCursor({\n                        w: imgWidth,\n                        h: imgHeight\n                    }, {\n                        w: $(stage).width(),\n                        h: $(stage).height()\n                    }, stage);\n                }\n                isDragging = false;\n                Constants.PUBLIC_VARS['isResizing'] = false;\n                $(ELEMS_WITH_RESIZE_CURSOR).css('cursor', '');\n                const scale = this.getImageScaleToStage($(stage).width(), $(stage).height());\n                $.extend(this.imageData, {\n                    initWidth: this.img.width * scale,\n                    initHeight: this.img.height * scale,\n                    initLeft: ($(stage).width() - this.img.width * scale) / 2,\n                    initTop: ($(stage).height() - this.img.height * scale) / 2\n                });\n            };\n            $.each(resizableHandles, function (dir, handle) {\n                handle.on(Constants.TOUCH_START_EVENT + Constants.EVENT_NS, function (e) {\n                    dragStart(dir, e);\n                });\n            });\n        }\n    };\n});\ndefine('skylark-photoviewer/core',[\n    './domq',\n    './defaults',\n    './constants',\n    './utilities',\n    './draggable',\n    './movable',\n    './resizable'\n], function ($, DEFAULTS, Constants, Utilities, draggable, movable, resizable) {\n    'use strict';\n    class PhotoViewer {\n        constructor(items, options, el) {\n            this.options = $.extend(true, {}, DEFAULTS, options);\n            if (options && $.isArray(options.footerToolbar)) {\n                this.options.footerToolbar = options.footerToolbar;\n            }\n            if (options && $.isArray(options.headerToolbar)) {\n                this.options.headerToolbar = options.headerToolbar;\n            }\n            this.$el = $(el);\n            this.isOpened = false;\n            this.isMaximized = false;\n            this.isRotated = false;\n            this.rotateAngle = 0;\n            this.isDoResize = false;\n            this.imageData = {};\n            this.modalData = {\n                width: null,\n                height: null,\n                left: null,\n                top: null\n            };\n            this.init(items, this.options);\n        }\n        init(items, opts) {\n            this.groupData = items;\n            this.groupIndex = opts['index'];\n            Constants.PUBLIC_VARS['zIndex'] = Constants.PUBLIC_VARS['zIndex'] === 0 ? opts['zIndex'] : Constants.PUBLIC_VARS['zIndex'];\n            const imgSrc = items[this.groupIndex]['src'];\n            this.open();\n            this.loadImage(imgSrc);\n            if (opts.draggable) {\n                this.draggable(this.$photoviewer, this.dragHandle, Constants.CLASS_NS + '-button');\n            }\n            if (opts.movable) {\n                this.movable(this.$stage, this.$image);\n            }\n            if (opts.resizable) {\n                this.resizable(this.$photoviewer, this.$stage, this.$image, opts.modalWidth, opts.modalHeight);\n            }\n        }\n        _createBtns(toolbar) {\n            const btns = [\n                'minimize',\n                'maximize',\n                'close',\n                'zoomIn',\n                'zoomOut',\n                'prev',\n                'next',\n                'fullscreen',\n                'actualSize',\n                'rotateLeft',\n                'rotateRight'\n            ];\n            let btnsHTML = '';\n            $.each(toolbar, (index, item) => {\n                const btnClass = `${ Constants.NS }-button ${ Constants.NS }-button-${ item }`;\n                if (btns.indexOf(item) >= 0) {\n                    btnsHTML += `<button class=\"${ btnClass }\" title=\"${ this.options.i18n[item] }\">\n          ${ this.options.icons[item] }\n          </button>`;\n                } else if (this.options.customButtons[item]) {\n                    btnsHTML += `<button class=\"${ btnClass }\" title=\"${ this.options.customButtons[item].title || '' }\">\n          ${ this.options.customButtons[item].text }\n          </button>`;\n                }\n            });\n            return btnsHTML;\n        }\n        _createTitle() {\n            return this.options.title ? `<div class=\"${ Constants.NS }-title\"></div>` : '';\n        }\n        _createTemplate() {\n            const photoviewerHTML = `<div class=\"${ Constants.NS }-modal\" tabindex=\"0\">\n        <div class=\"${ Constants.NS }-inner\">\n          <div class=\"${ Constants.NS }-header\">\n            <div class=\"${ Constants.NS }-toolbar ${ Constants.NS }-toolbar-header\">\n            ${ this._createBtns(this.options.headerToolbar) }\n            </div>\n            ${ this._createTitle() }\n          </div>\n          <div class=\"${ Constants.NS }-stage\">\n            <img class=\"${ Constants.NS }-image\" src=\"\" alt=\"\" />\n          </div>\n          <div class=\"${ Constants.NS }-footer\">\n            <div class=\"${ Constants.NS }-toolbar ${ Constants.NS }-toolbar-footer\">\n            ${ this._createBtns(this.options.footerToolbar) }\n            </div>\n          </div>\n        </div>\n      </div>`;\n            return photoviewerHTML;\n        }\n        build() {\n            const photoviewerHTML = this._createTemplate();\n            const $photoviewer = $(photoviewerHTML);\n            this.$photoviewer = $photoviewer;\n            this.$stage = $photoviewer.find(Constants.CLASS_NS + '-stage');\n            this.$title = $photoviewer.find(Constants.CLASS_NS + '-title');\n            this.$image = $photoviewer.find(Constants.CLASS_NS + '-image');\n            this.$close = $photoviewer.find(Constants.CLASS_NS + '-button-close');\n            this.$maximize = $photoviewer.find(Constants.CLASS_NS + '-button-maximize');\n            this.$minimize = $photoviewer.find(Constants.CLASS_NS + '-button-minimize');\n            this.$zoomIn = $photoviewer.find(Constants.CLASS_NS + '-button-zoomIn');\n            this.$zoomOut = $photoviewer.find(Constants.CLASS_NS + '-button-zoomOut');\n            this.$actualSize = $photoviewer.find(Constants.CLASS_NS + '-button-actualSize');\n            this.$fullscreen = $photoviewer.find(Constants.CLASS_NS + '-button-fullscreen');\n            this.$rotateLeft = $photoviewer.find(Constants.CLASS_NS + '-button-rotateLeft');\n            this.$rotateRight = $photoviewer.find(Constants.CLASS_NS + '-button-rotateRight');\n            this.$prev = $photoviewer.find(Constants.CLASS_NS + '-button-prev');\n            this.$next = $photoviewer.find(Constants.CLASS_NS + '-button-next');\n            this.$stage.addClass('stage-ready');\n            this.$image.addClass('image-ready');\n            this.$photoviewer.css('z-index', Constants.PUBLIC_VARS['zIndex']);\n            if (!this.options.dragHandle || this.options.dragHandle === Constants.CLASS_NS + '-modal') {\n                this.dragHandle = this.$photoviewer;\n            } else {\n                this.dragHandle = this.$photoviewer.find(this.options.dragHandle);\n            }\n            $(this.options.appendTo).eq(0).append(this.$photoviewer);\n            this._addEvents();\n            this._addCustomButtonEvents();\n        }\n        open() {\n            this._triggerHook('beforeOpen', this);\n            if (!this.options.multiInstances) {\n                $(Constants.CLASS_NS + '-modal').eq(0).remove();\n            }\n            if (!$(Constants.CLASS_NS + '-modal').length && this.options.fixedContent) {\n                $('html').css({ overflow: 'hidden' });\n                if (Utilities.hasScrollbar()) {\n                    const scrollbarWidth = Utilities.getScrollbarWidth();\n                    if (scrollbarWidth) {\n                        $('html').css({ 'padding-right': scrollbarWidth });\n                    }\n                }\n            }\n            this.build();\n            this.setModalPos(this.$photoviewer);\n            this.$photoviewer.get(0).focus();\n            this._triggerHook('opened', this);\n        }\n        close() {\n            this._triggerHook('beforeClose', this);\n            this.$photoviewer.remove();\n            this.isOpened = false;\n            this.isMaximized = false;\n            this.isRotated = false;\n            this.rotateAngle = 0;\n            if (!$(Constants.CLASS_NS + '-modal').length) {\n                if (this.options.fixedContent) {\n                    $('html').css({\n                        overflow: '',\n                        'padding-right': ''\n                    });\n                }\n                if (this.options.multiInstances) {\n                    Constants.PUBLIC_VARS['zIndex'] = this.options.zIndex;\n                }\n                Constants.$W.off(Constants.RESIZE_EVENT + Constants.EVENT_NS);\n            }\n            this._triggerHook('closed', this);\n        }\n        setModalPos(modal) {\n            const winWidth = Constants.$W.width();\n            const winHeight = Constants.$W.height();\n            const scrollLeft = Constants.$D.scrollLeft();\n            const scrollTop = Constants.$D.scrollTop();\n            const modalWidth = this.options.modalWidth;\n            const modalHeight = this.options.modalHeight;\n            if (this.options.initMaximized) {\n                modal.addClass(Constants.NS + '-maximize');\n                modal.css({\n                    width: '100%',\n                    height: '100%',\n                    left: 0,\n                    top: 0\n                });\n                this.isOpened = true;\n                this.isMaximized = true;\n            } else {\n                modal.css({\n                    width: modalWidth,\n                    height: modalHeight,\n                    left: (winWidth - modalWidth) / 2 + scrollLeft + 'px',\n                    top: (winHeight - modalHeight) / 2 + scrollTop + 'px'\n                });\n            }\n        }\n        setModalSize(img) {\n            const winWidth = Constants.$W.width();\n            const winHeight = Constants.$W.height();\n            const scrollLeft = Constants.$D.scrollLeft();\n            const scrollTop = Constants.$D.scrollTop();\n            const stageCSS = {\n                left: this.$stage.css('left'),\n                right: this.$stage.css('right'),\n                top: this.$stage.css('top'),\n                bottom: this.$stage.css('bottom'),\n                borderLeft: this.$stage.css('border-left-width'),\n                borderRight: this.$stage.css('border-right-width'),\n                borderTop: this.$stage.css('border-top-width'),\n                borderBottom: this.$stage.css('border-bottom-width')\n            };\n            const modalWidth = img.width + parseFloat(stageCSS.left) + parseFloat(stageCSS.right) + parseFloat(stageCSS.borderLeft) + parseFloat(stageCSS.borderRight);\n            const modalHeight = img.height + parseFloat(stageCSS.top) + parseFloat(stageCSS.bottom) + parseFloat(stageCSS.borderTop) + parseFloat(stageCSS.borderBottom);\n            const gapThreshold = (this.options.gapThreshold > 0 ? this.options.gapThreshold : 0) + 1;\n            const scale = Math.min(winWidth / (modalWidth * gapThreshold), winHeight / (modalHeight * gapThreshold), 1);\n            let minWidth = Math.max(modalWidth * scale, this.options.modalWidth);\n            let minHeight = Math.max(modalHeight * scale, this.options.modalHeight);\n            minWidth = this.options.fixedModalSize ? this.options.modalWidth : Math.round(minWidth);\n            minHeight = this.options.fixedModalSize ? this.options.modalHeight : Math.round(minHeight);\n            const modalCSSObj = {\n                width: minWidth + 'px',\n                height: minHeight + 'px',\n                left: (winWidth - minWidth) / 2 + scrollLeft + 'px',\n                top: (winHeight - minHeight) / 2 + scrollTop + 'px'\n            };\n            if (this.options.initAnimation) {\n                this.$photoviewer.animate(modalCSSObj, 400, 'ease-in-out', () => {\n                    this.setImageSize(img);\n                });\n            } else {\n                this.$photoviewer.css(modalCSSObj);\n                this.setImageSize(img);\n            }\n            this.isOpened = true;\n        }\n        getImageScaleToStage(stageWidth, stageHeight) {\n            let scale = 1;\n            if (!this.isRotated) {\n                scale = Math.min(stageWidth / this.img.width, stageHeight / this.img.height, 1);\n            } else {\n                scale = Math.min(stageWidth / this.img.height, stageHeight / this.img.width, 1);\n            }\n            return scale;\n        }\n        setImageSize(img) {\n            const stageData = {\n                w: this.$stage.width(),\n                h: this.$stage.height()\n            };\n            const scale = this.getImageScaleToStage(stageData.w, stageData.h);\n            this.$image.css({\n                width: Math.ceil(img.width * scale) + 'px',\n                height: Math.ceil(img.height * scale) + 'px',\n                left: (stageData.w - Math.ceil(img.width * scale)) / 2 + 'px',\n                top: (stageData.h - Math.ceil(img.height * scale)) / 2 + 'px'\n            });\n            $.extend(this.imageData, {\n                initWidth: img.width * scale,\n                initHeight: img.height * scale,\n                initLeft: (stageData.w - img.width * scale) / 2,\n                initTop: (stageData.h - img.height * scale) / 2,\n                width: img.width * scale,\n                height: img.height * scale,\n                left: (stageData.w - img.width * scale) / 2,\n                top: (stageData.h - img.height * scale) / 2\n            });\n            Utilities.setGrabCursor({\n                w: this.$image.width(),\n                h: this.$image.height()\n            }, {\n                w: this.$stage.width(),\n                h: this.$stage.height()\n            }, this.$stage, this.isRotated);\n            if (!this.imageLoaded) {\n                this.$photoviewer.find(Constants.CLASS_NS + '-loader').remove();\n                this.$stage.removeClass('stage-ready');\n                this.$image.removeClass('image-ready');\n                if (this.options.initAnimation && !this.options.progressiveLoading) {\n                    this.$image.fadeIn();\n                }\n                this.imageLoaded = true;\n            }\n        }\n        loadImage(imgSrc, fn, err) {\n            this.$image.removeAttr('style').attr('src', '');\n            this.isRotated = false;\n            this.rotateAngle = 0;\n            this.imageLoaded = false;\n            this.$photoviewer.append(`<div class=\"${ Constants.NS }-loader\"></div>`);\n            this.$stage.addClass('stage-ready');\n            this.$image.addClass('image-ready');\n            if (this.options.initAnimation && !this.options.progressiveLoading) {\n                this.$image.hide();\n            }\n            this.$image.attr('src', imgSrc);\n            Utilities.preloadImage(imgSrc, img => {\n                this.img = img;\n                this.imageData = {\n                    originalWidth: img.width,\n                    originalHeight: img.height\n                };\n                if (this.isMaximized || this.isOpened && this.options.fixedModalPos) {\n                    this.setImageSize(img);\n                } else {\n                    this.setModalSize(img);\n                }\n                if (fn) {\n                    fn.call();\n                }\n            }, () => {\n                this.$photoviewer.find(Constants.CLASS_NS + '-loader').remove();\n                if (err) {\n                    err.call();\n                }\n            });\n            if (this.options.title) {\n                this.setImageTitle(imgSrc);\n            }\n        }\n        setImageTitle(url) {\n            const title = this.groupData[this.groupIndex].title || Utilities.getImageNameFromUrl(url);\n            this.$title.html(title);\n        }\n        jump(step) {\n            this._triggerHook('beforeChange', [\n                this,\n                this.groupIndex\n            ]);\n            this.groupIndex = this.groupIndex + step;\n            this.jumpTo(this.groupIndex);\n        }\n        jumpTo(index) {\n            index = index % this.groupData.length;\n            if (index >= 0) {\n                index = index % this.groupData.length;\n            } else if (index < 0) {\n                index = (this.groupData.length + index) % this.groupData.length;\n            }\n            this.groupIndex = index;\n            this.loadImage(this.groupData[index].src, () => {\n                this._triggerHook('changed', [\n                    this,\n                    index\n                ]);\n            }, () => {\n                this._triggerHook('changed', [\n                    this,\n                    index\n                ]);\n            });\n        }\n        wheel(e) {\n            e.preventDefault();\n            let delta = 1;\n            if (e.deltaY) {\n                delta = e.deltaY > 0 ? 1 : -1;\n            } else if (e.wheelDelta) {\n                delta = -e.wheelDelta / 120;\n            } else if (e.detail) {\n                delta = e.detail > 0 ? 1 : -1;\n            }\n            const ratio = -delta * this.options.ratioThreshold;\n            const pointer = {\n                x: e.clientX - this.$stage.offset().left + Constants.$D.scrollLeft(),\n                y: e.clientY - this.$stage.offset().top + Constants.$D.scrollTop()\n            };\n            this.zoom(ratio, pointer, e);\n        }\n        zoom(ratio, origin, e) {\n            ratio = ratio < 0 ? 1 / (1 - ratio) : 1 + ratio;\n            ratio = this.$image.width() / this.imageData.originalWidth * ratio;\n            if (ratio > this.options.maxRatio || ratio < this.options.minRatio) {\n                return;\n            }\n            this.zoomTo(ratio, origin, e);\n        }\n        zoomTo(ratio, origin, e) {\n            const $image = this.$image;\n            const $stage = this.$stage;\n            const imgData = {\n                w: this.imageData.width,\n                h: this.imageData.height,\n                x: this.imageData.left,\n                y: this.imageData.top\n            };\n            const stageData = {\n                w: $stage.width(),\n                h: $stage.height(),\n                x: $stage.offset().left,\n                y: $stage.offset().top\n            };\n            const newWidth = this.imageData.originalWidth * ratio;\n            const newHeight = this.imageData.originalHeight * ratio;\n            let newLeft = origin.x - (origin.x - imgData.x) / imgData.w * newWidth;\n            let newTop = origin.y - (origin.y - imgData.y) / imgData.h * newHeight;\n            const Î´ = !this.isRotated ? 0 : (newWidth - newHeight) / 2;\n            const imgNewWidth = !this.isRotated ? newWidth : newHeight;\n            const imgNewHeight = !this.isRotated ? newHeight : newWidth;\n            const offsetX = stageData.w - newWidth;\n            const offsetY = stageData.h - newHeight;\n            if (imgNewHeight <= stageData.h) {\n                newTop = (stageData.h - newHeight) / 2;\n            } else {\n                newTop = newTop > Î´ ? Î´ : newTop > offsetY - Î´ ? newTop : offsetY - Î´;\n            }\n            if (imgNewWidth <= stageData.w) {\n                newLeft = (stageData.w - newWidth) / 2;\n            } else {\n                newLeft = newLeft > -Î´ ? -Î´ : newLeft > offsetX + Î´ ? newLeft : offsetX + Î´;\n            }\n            if (Math.abs(this.imageData.initWidth - newWidth) < this.imageData.initWidth * 0.05) {\n                this.setImageSize(this.img);\n            } else {\n                $image.css({\n                    width: Math.round(newWidth) + 'px',\n                    height: Math.round(newHeight) + 'px',\n                    left: Math.round(newLeft) + 'px',\n                    top: Math.round(newTop) + 'px'\n                });\n                Utilities.setGrabCursor({\n                    w: Math.round(imgNewWidth),\n                    h: Math.round(imgNewHeight)\n                }, {\n                    w: stageData.w,\n                    h: stageData.h\n                }, this.$stage);\n            }\n            $.extend(this.imageData, {\n                width: newWidth,\n                height: newHeight,\n                left: newLeft,\n                top: newTop\n            });\n        }\n        rotate(angle) {\n            this.rotateAngle = this.rotateAngle + angle;\n            if (this.rotateAngle / 90 % 2 === 0) {\n                this.isRotated = false;\n            } else {\n                this.isRotated = true;\n            }\n            this.rotateTo(this.rotateAngle);\n        }\n        rotateTo(angle) {\n            this.$image.css({ transform: 'rotate(' + angle + 'deg)' });\n            this.setImageSize({\n                width: this.imageData.originalWidth,\n                height: this.imageData.originalHeight\n            });\n            this.$stage.removeClass('is-grab');\n        }\n        resize() {\n            const resizeHandler = Utilities.throttle(() => {\n                if (this.isOpened) {\n                    if (this.isMaximized) {\n                        this.setImageSize({\n                            width: this.imageData.originalWidth,\n                            height: this.imageData.originalHeight\n                        });\n                    } else {\n                        this.setModalSize({\n                            width: this.imageData.originalWidth,\n                            height: this.imageData.originalHeight\n                        });\n                    }\n                }\n            }, 500);\n            return resizeHandler;\n        }\n        maximize() {\n            this.$photoviewer.get(0).focus();\n            if (!this.isMaximized) {\n                this.modalData = {\n                    width: this.$photoviewer.width(),\n                    height: this.$photoviewer.height(),\n                    left: this.$photoviewer.offset().left,\n                    top: this.$photoviewer.offset().top\n                };\n                this.$photoviewer.addClass(Constants.NS + '-maximize');\n                this.$photoviewer.css({\n                    width: '100%',\n                    height: '100%',\n                    left: 0,\n                    top: 0\n                });\n                this.isMaximized = true;\n            } else {\n                this.$photoviewer.removeClass(Constants.NS + '-maximize');\n                const initModalLeft = (Constants.$W.width() - this.options.modalWidth) / 2 + Constants.$D.scrollLeft();\n                const initModalTop = (Constants.$W.height() - this.options.modalHeight) / 2 + Constants.$D.scrollTop();\n                this.$photoviewer.css({\n                    width: this.modalData.width ? this.modalData.width : this.options.modalWidth,\n                    height: this.modalData.height ? this.modalData.height : this.options.modalHeight,\n                    left: this.modalData.left ? this.modalData.left : initModalLeft,\n                    top: this.modalData.top ? this.modalData.top : initModalTop\n                });\n                this.isMaximized = false;\n            }\n            this.setImageSize({\n                width: this.imageData.originalWidth,\n                height: this.imageData.originalHeight\n            });\n        }\n        fullscreen() {\n            this.$photoviewer.get(0).focus();\n            Utilities.requestFullscreen(this.$photoviewer[0]);\n        }\n        _keydown(e) {\n            if (!this.options.keyboard) {\n                return false;\n            }\n            const keyCode = e.keyCode || e.which || e.charCode;\n            const ctrlKey = e.ctrlKey || e.metaKey;\n            const altKey = e.altKey || e.metaKey;\n            switch (keyCode) {\n                // â\n                case 37:\n                    this.jump(-1);\n                    break;\n                // â\n                case 39:\n                    this.jump(1);\n                    break;\n                // +\n                case 187:\n                    this.zoom(this.options.ratioThreshold * 3, {\n                        x: this.$stage.width() / 2,\n                        y: this.$stage.height() / 2\n                    }, e);\n                    break;\n                // -\n                case 189:\n                    this.zoom(-this.options.ratioThreshold * 3, {\n                        x: this.$stage.width() / 2,\n                        y: this.$stage.height() / 2\n                    }, e);\n                    break;\n                // + Firefox\n                case 61:\n                    this.zoom(this.options.ratioThreshold * 3, {\n                        x: this.$stage.width() / 2,\n                        y: this.$stage.height() / 2\n                    }, e);\n                    break;\n                // - Firefox\n                case 173:\n                    this.zoom(-this.options.ratioThreshold * 3, {\n                        x: this.$stage.width() / 2,\n                        y: this.$stage.height() / 2\n                    }, e);\n                    break;\n                // Ctrl + Alt + 0\n                case 48:\n                    if (ctrlKey && altKey) {\n                        this.zoomTo(1, {\n                            x: this.$stage.width() / 2,\n                            y: this.$stage.height() / 2\n                        }, e);\n                    }\n                    break;\n                // Ctrl + ,\n                case 188:\n                    if (ctrlKey) {\n                        this.rotate(-90);\n                    }\n                    break;\n                // Ctrl + .\n                case 190:\n                    if (ctrlKey) {\n                        this.rotate(90);\n                    }\n                    break;\n                // Q\n                case 81:\n                    this.close();\n                    break;\n                default:\n            }\n        }\n        _addEvents() {\n            this.$close.off(Constants.CLICK_EVENT + Constants.EVENT_NS).on(Constants.CLICK_EVENT + Constants.EVENT_NS, e => {\n                this.close();\n            });\n            this.$stage.off(Constants.WHEEL_EVENT + Constants.EVENT_NS).on(Constants.WHEEL_EVENT + Constants.EVENT_NS, e => {\n                this.wheel(e);\n            });\n            this.$zoomIn.off(Constants.CLICK_EVENT + Constants.EVENT_NS).on(Constants.CLICK_EVENT + Constants.EVENT_NS, e => {\n                this.zoom(this.options.ratioThreshold * 3, {\n                    x: this.$stage.width() / 2,\n                    y: this.$stage.height() / 2\n                }, e);\n            });\n            this.$zoomOut.off(Constants.CLICK_EVENT + Constants.EVENT_NS).on(Constants.CLICK_EVENT + Constants.EVENT_NS, e => {\n                this.zoom(-this.options.ratioThreshold * 3, {\n                    x: this.$stage.width() / 2,\n                    y: this.$stage.height() / 2\n                }, e);\n            });\n            this.$actualSize.off(Constants.CLICK_EVENT + Constants.EVENT_NS).on(Constants.CLICK_EVENT + Constants.EVENT_NS, e => {\n                this.zoomTo(1, {\n                    x: this.$stage.width() / 2,\n                    y: this.$stage.height() / 2\n                }, e);\n            });\n            this.$prev.off(Constants.CLICK_EVENT + Constants.EVENT_NS).on(Constants.CLICK_EVENT + Constants.EVENT_NS, () => {\n                this.jump(-1);\n            });\n            this.$fullscreen.off(Constants.CLICK_EVENT + Constants.EVENT_NS).on(Constants.CLICK_EVENT + Constants.EVENT_NS, () => {\n                this.fullscreen();\n            });\n            this.$next.off(Constants.CLICK_EVENT + Constants.EVENT_NS).on(Constants.CLICK_EVENT + Constants.EVENT_NS, () => {\n                this.jump(1);\n            });\n            this.$rotateLeft.off(Constants.CLICK_EVENT + Constants.EVENT_NS).on(Constants.CLICK_EVENT + Constants.EVENT_NS, () => {\n                this.rotate(-90);\n            });\n            this.$rotateRight.off(Constants.CLICK_EVENT + Constants.EVENT_NS).on(Constants.CLICK_EVENT + Constants.EVENT_NS, () => {\n                this.rotate(90);\n            });\n            this.$maximize.off(Constants.CLICK_EVENT + Constants.EVENT_NS).on(Constants.CLICK_EVENT + Constants.EVENT_NS, () => {\n                this.maximize();\n            });\n            this.$photoviewer.off(Constants.KEYDOWN_EVENT + Constants.EVENT_NS).on(Constants.KEYDOWN_EVENT + Constants.EVENT_NS, e => {\n                this._keydown(e);\n            });\n            Constants.$W.on(Constants.RESIZE_EVENT + Constants.EVENT_NS, this.resize());\n        }\n        _addCustomButtonEvents() {\n            for (const btnKey in this.options.customButtons) {\n                this.$photoviewer.find(Constants.CLASS_NS + '-button-' + btnKey).off(Constants.CLICK_EVENT + Constants.EVENT_NS).on(Constants.CLICK_EVENT + Constants.EVENT_NS, e => {\n                    this.options.customButtons[btnKey].click.apply(this, [\n                        this,\n                        e\n                    ]);\n                });\n            }\n        }\n        _triggerHook(e, data) {\n            if (this.options.callbacks[e]) {\n                this.options.callbacks[e].apply(this, $.isArray(data) ? data : [data]);\n            }\n        }\n    }\n    $.extend(PhotoViewer.prototype, draggable, movable, resizable);\n    window.PhotoViewer = PhotoViewer;\n    return PhotoViewer;\n});\ndefine('skylark-photoviewer/main',[\n\t'./core'\n], function (PhotoViewer) {\n    'use strict';\n    return PhotoViewer;\n});\ndefine('skylark-photoviewer', ['skylark-photoviewer/main'], function (main) { return main; });\n\n"]}