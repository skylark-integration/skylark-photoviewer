{"version":3,"sources":["skylark-photoviewer.js"],"names":[],"mappingsfile":"../skylark-photoviewer.js","sourcesContent":["define('skylark-photoviewer/domq',['skylark-jquery'], function ($) {\n    'use strict';\n\n    return $;\n});\ndefine('skylark-photoviewer/defaults',[\n    './domq'\n], function ($) {\n    'use strict';\n    return {\n        draggable: true,\n        resizable: true,\n        movable: true,\n        keyboard: true,\n        title: true,\n        modalWidth: 320,\n        modalHeight: 320,\n        fixedContent: true,\n        fixedModalSize: false,\n        initMaximized: false,\n        gapThreshold: 0.02,\n        ratioThreshold: 0.1,\n        minRatio: 0.05,\n        maxRatio: 16,\n        headerToolbar: [\n            'maximize',\n            'close'\n        ],\n        footerToolbar: [\n            'zoomIn',\n            'zoomOut',\n            'prev',\n            'fullscreen',\n            'next',\n            'actualSize',\n            'rotateRight'\n        ],\n        icons: {\n            minimize: `<svg viewBox=\"0 0 24 24\" class=\"svg-inline-icon\">\n        <path fill=\"currentColor\" d=\"M20,14H4V10H20\"></path>\n      </svg>`,\n            maximize: `<svg viewBox=\"0 0 24 24\" class=\"svg-inline-icon\">\n        <path fill=\"currentColor\" d=\"M4,4H20V20H4V4M6,8V18H18V8H6Z\"></path>\n      </svg>`,\n            close: `<svg viewBox=\"0 0 24 24\" class=\"svg-inline-icon\">\n        <path fill=\"currentColor\" d=\"M13.46,12L19,17.54V19H17.54L12,13.46L6.46,19H5V17.54L10.54,12\n        L5,6.46V5H6.46L12,10.54L17.54,5H19V6.46L13.46,12Z\"></path>\n      </svg>`,\n            zoomIn: `<svg viewBox=\"0 0 24 24\" class=\"svg-inline-icon\">\n        <path fill=\"currentColor\" d=\"M15.5,14L20.5,19L19,20.5L14,15.5V14.71L13.73,14.43\n        C12.59,15.41 11.11,16 9.5,16A6.5,6.5 0 0,1 3,9.5A6.5,6.5 0 0,1 9.5,3A6.5,6.5 0 0,1 16,9.5\n        C16,11.11 15.41,12.59 14.43,13.73L14.71,14H15.5M9.5,14C12,14 14,12 14,9.5C14,7 12,5 9.5,5\n        C7,5 5,7 5,9.5C5,12 7,14 9.5,14M12,10H10V12H9V10H7V9H9V7H10V9H12V10Z\"></path>\n      </svg>`,\n            zoomOut: `<svg viewBox=\"0 0 24 24\" class=\"svg-inline-icon\">\n        <path fill=\"currentColor\" d=\"M15.5,14H14.71L14.43,13.73C15.41,12.59 16,11.11 16,9.5\n        A6.5,6.5 0 0,0 9.5,3A6.5,6.5 0 0,0 3,9.5A6.5,6.5 0 0,0 9.5,16\n        C11.11,16 12.59,15.41 13.73,14.43L14,14.71V15.5L19,20.5L20.5,19L15.5,14M9.5,14\n        C7,14 5,12 5,9.5C5,7 7,5 9.5,5C12,5 14,7 14,9.5C14,12 12,14 9.5,14M7,9H12V10H7V9Z\"></path>\n      </svg>`,\n            prev: `<svg viewBox=\"0 0 24 24\" class=\"svg-inline-icon\">\n        <path fill=\"currentColor\" d=\"M6,18V6H8V18H6M9.5,12L18,6V18L9.5,12Z\"></path>\n      </svg>`,\n            next: `<svg viewBox=\"0 0 24 24\" class=\"svg-inline-icon\">\n        <path fill=\"currentColor\" d=\"M16,18H18V6H16M6,18L14.5,12L6,6V18Z\"></path>\n      </svg>`,\n            fullscreen: `<svg viewBox=\"0 0 24 24\" class=\"svg-inline-icon\">\n        <path fill=\"currentColor\" d=\"M8.5,12.5L11,15.5L14.5,11L19,17H5M23,18V6A2,2 0 0,0 21,4H3\n        A2,2 0 0,0 1,6V18A2,2 0 0,0 3,20H21A2,2 0 0,0 23,18Z\"></path>\n      </svg>`,\n            actualSize: `<svg viewBox=\"0 0 24 24\" class=\"svg-inline-icon\">\n        <path fill=\"currentColor\" d=\"M9.5,13.09L10.91,14.5L6.41,19H10V21H3V14H5V17.59L9.5,13.09\n        M10.91,9.5L9.5,10.91L5,6.41V10H3V3H10V5H6.41L10.91,9.5M14.5,13.09L19,17.59V14H21V21H14V19\n        H17.59L13.09,14.5L14.5,13.09M13.09,9.5L17.59,5H14V3H21V10H19V6.41L14.5,10.91\n        L13.09,9.5Z\"></path>\n      </svg>`,\n            rotateLeft: `<svg viewBox=\"0 0 24 24\" class=\"svg-inline-icon\">\n        <path fill=\"currentColor\" d=\"M13,4.07V1L8.45,5.55L13,10V6.09C15.84,6.57 18,9.03 18,12\n        C18,14.97 15.84,17.43 13,17.91V19.93C16.95,19.44 20,16.08 20,12C20,7.92 16.95,4.56 13,4.07\n        M7.1,18.32C8.26,19.22 9.61,19.76 11,19.93V17.9C10.13,17.75 9.29,17.41 8.54,16.87L7.1,18.32\n        M6.09,13H4.07C4.24,14.39 4.79,15.73 5.69,16.89L7.1,15.47C6.58,14.72 6.23,13.88 6.09,13\n        M7.11,8.53L5.7,7.11C4.8,8.27 4.24,9.61 4.07,11H6.09C6.23,10.13 6.58,9.28 7.11,8.53Z\"></path>\n      </svg>`,\n            rotateRight: `<svg viewBox=\"0 0 24 24\" class=\"svg-inline-icon\">\n        <path fill=\"currentColor\" d=\"M16.89,15.5L18.31,16.89C19.21,15.73 19.76,14.39 19.93,13H17.91\n        C17.77,13.87 17.43,14.72 16.89,15.5M13,17.9V19.92C14.39,19.75 15.74,19.21 16.9,18.31\n        L15.46,16.87C14.71,17.41 13.87,17.76 13,17.9M19.93,11C19.76,9.61 19.21,8.27 18.31,7.11\n        L16.89,8.53C17.43,9.28 17.77,10.13 17.91,11M15.55,5.55L11,1V4.07C7.06,4.56 4,7.92 4,12\n        C4,16.08 7.05,19.44 11,19.93V17.91C8.16,17.43 6,14.97 6,12C6,9.03 8.16,6.57 11,6.09V10\n        L15.55,5.55Z\"></path>\n      </svg>`\n        },\n        i18n: {\n            minimize: 'minimize',\n            maximize: 'maximize',\n            close: 'close',\n            zoomIn: 'zoom-in (+)',\n            zoomOut: 'zoom-out (-)',\n            prev: 'prev (\\u2190)',\n            next: 'next (\\u2192)',\n            fullscreen: 'fullscreen',\n            actualSize: 'actual-size (Ctrl+Alt+0)',\n            rotateLeft: 'rotate-left (Ctrl+,)',\n            rotateRight: 'rotate-right (Ctrl+.)'\n        },\n        multiInstances: true,\n        initAnimation: true,\n        fixedModalPos: false,\n        zIndex: 1090,\n        dragHandle: false,\n        callbacks: {\n            beforeOpen: $.noop,\n            opened: $.noop,\n            beforeClose: $.noop,\n            closed: $.noop,\n            beforeChange: $.noop,\n            changed: $.noop\n        },\n        index: 0,\n        progressiveLoading: true,\n        appendTo: 'body',\n        customButtons: {}\n    };\n});\ndefine('skylark-photoviewer/utilities',[\n    \"skylark-langx\",\n    \"skylark-domx-browser\",\n    \"skylark-domx-noder\",\n    \"skylark-domx-geom\",\n    \"skylark-domx-images\"\n],function (langx,browser,noder,geom,images) {\n    'use strict';\n    const document = window.document;\n\n    /*\n    function throttle(fn, delay) {\n        let timer = null;\n        return function () {\n            const context = this;\n            const args = arguments;\n            clearTimeout(timer);\n            timer = setTimeout(function () {\n                fn.apply(context, args);\n            }, delay);\n        };\n    }\n    function preloadImage(src, success, error) {\n        const img = new Image();\n        img.onload = function () {\n            success(img);\n        };\n        img.onerror = function () {\n            error(img);\n        };\n        img.src = src;\n    }\n    function requestFullscreen(element) {\n        if (element.requestFullscreen) {\n            element.requestFullscreen();\n        } else if (element.mozRequestFullScreen) {\n            element.mozRequestFullScreen();\n        } else if (element.webkitRequestFullscreen) {\n            element.webkitRequestFullscreen();\n        } else if (element.msRequestFullscreen) {\n            element.msRequestFullscreen();\n        }\n    }\n    function exitFullscreen() {\n        if (document.exitFullscreen) {\n            document.exitFullscreen();\n        } else if (document.mozCancelFullScreen) {\n            document.mozCancelFullScreen();\n        } else if (document.webkitExitFullscreen) {\n            document.webkitExitFullscreen();\n        }\n    }\n\n\n    function getScrollbarWidth() {\n        const scrollDiv = document.createElement('div');\n        scrollDiv.style.cssText = 'width: 99px; height: 99px; overflow: scroll; position: absolute; top: -9999px;';\n        document.body.appendChild(scrollDiv);\n        const scrollbarWidth = scrollDiv.offsetWidth - scrollDiv.clientWidth;\n        document.body.removeChild(scrollDiv);\n        return scrollbarWidth;\n    }\n\n    function hasScrollbar() {\n        return document.body.scrollHeight > (window.innerHeight || document.documentElement.clientHeight);\n    }\n\n\n    function supportTouch() {\n        return !!('ontouchstart' in window || window.DocumentTouch && document instanceof window.DocumentTouch);\n    }\n\n    */\n \n\n     function setGrabCursor(imageData, stageData, stage, isRotated) {\n        const imageWidth = !isRotated ? imageData.w : imageData.h;\n        const imageHeight = !isRotated ? imageData.h : imageData.w;\n        if (imageHeight > stageData.h || imageWidth > stageData.w) {\n            stage.addClass('is-grab');\n        }\n        if (imageHeight <= stageData.h && imageWidth <= stageData.w) {\n            stage.removeClass('is-grab');\n        }\n    }\n\n    function getImageNameFromUrl(url) {\n        const reg = /^.*?\\/*([^/?]*)\\.[a-z]+(\\?.+|$)/gi;\n        const txt = url.replace(reg, '$1');\n        return txt;\n    }\n\n    return {\n        document: document,\n        throttle: langx.debounce,\n        preloadImage: function preloadImage(src, success, error) {\n            images.preload(src).then(function(data){\n                success(data.imgs[0]);\n            },error);\n        },\n        requestFullscreen: noder.fullscreen,\n        exitFullscreen: noder.fullscreen,\n        getImageNameFromUrl: getImageNameFromUrl,\n        hasScrollbar: geom.hasScrollbar,\n        getScrollbarWidth: geom.scrollbarWidth,\n        setGrabCursor: setGrabCursor,\n        supportTouch: function() {\n            return browser.support.tocuh;\n        }\n    }\n});\ndefine('skylark-photoviewer/constants',[\n    './domq',\n    './utilities'\n], function ($, utilities) {\n    'use strict';\n    const $W = $(window);\n    const $D = $(utilities.document);\n    const CLICK_EVENT = 'click';\n    const RESIZE_EVENT = 'resize';\n    const KEYDOWN_EVENT = 'keydown';\n    const WHEEL_EVENT = 'wheel mousewheel DOMMouseScroll';\n    const TOUCH_START_EVENT = utilities.supportTouch() ? 'touchstart' : 'mousedown';\n    const TOUCH_MOVE_EVENT = utilities.supportTouch() ? 'touchmove' : 'mousemove';\n    const TOUCH_END_EVENT = utilities.supportTouch() ? 'touchend' : 'mouseup';\n    const NS = 'photoviewer';\n    const CLASS_NS = '.' + NS;\n    const EVENT_NS = '.' + NS;\n    const PUBLIC_VARS = {\n        isMoving: false,\n        isResizing: false,\n        zIndex: 0\n    };\n    return {\n        $W: $W,\n        $D: $D,\n        CLICK_EVENT: CLICK_EVENT,\n        RESIZE_EVENT: RESIZE_EVENT,\n        KEYDOWN_EVENT: KEYDOWN_EVENT,\n        WHEEL_EVENT: WHEEL_EVENT,\n        TOUCH_START_EVENT: TOUCH_START_EVENT,\n        TOUCH_MOVE_EVENT: TOUCH_MOVE_EVENT,\n        TOUCH_END_EVENT: TOUCH_END_EVENT,\n        NS: NS,\n        CLASS_NS: CLASS_NS,\n        EVENT_NS: EVENT_NS,\n        PUBLIC_VARS: PUBLIC_VARS\n    };\n});\ndefine('skylark-photoviewer/draggable',[\n    \"skylark-domx-plugins-interact/movable\",\n    './domq',\n    './constants'\n], function (_movable,$, Constants) {\n    'use strict';\n    return {\n        draggable(modal, dragHandle, dragCancel) {\n            /*\n            let isDragging = false;\n            let startX = 0;\n            let startY = 0;\n            let left = 0;\n            let top = 0;\n            const dragStart = e => {\n                e = e || window.event;\n                modal.get(0).focus();\n                const elemCancel = $(e.target).closest(dragCancel);\n                if (elemCancel.length) {\n                    return true;\n                }\n                if (this.options.multiInstances) {\n                    modal.css('z-index', ++Constants.PUBLIC_VARS['zIndex']);\n                }\n                isDragging = true;\n                startX = e.type === 'touchstart' ? e.targetTouches[0].pageX : e.clientX;\n                startY = e.type === 'touchstart' ? e.targetTouches[0].pageY : e.clientY;\n                left = $(modal).offset().left;\n                top = $(modal).offset().top;\n                Constants.$D.on(Constants.TOUCH_MOVE_EVENT + Constants.EVENT_NS, dragMove).on(Constants.TOUCH_END_EVENT + Constants.EVENT_NS, dragEnd);\n            };\n            const dragMove = e => {\n                e = e || window.event;\n                e.preventDefault();\n                if (isDragging && !Constants.PUBLIC_VARS['isMoving'] && !Constants.PUBLIC_VARS['isResizing'] && !this.isMaximized) {\n                    const endX = e.type === 'touchmove' ? e.targetTouches[0].pageX : e.clientX;\n                    const endY = e.type === 'touchmove' ? e.targetTouches[0].pageY : e.clientY;\n                    const relativeX = endX - startX;\n                    const relativeY = endY - startY;\n                    $(modal).css({\n                        left: relativeX + left + 'px',\n                        top: relativeY + top + 'px'\n                    });\n                }\n            };\n            const dragEnd = () => {\n                Constants.$D.off(Constants.TOUCH_MOVE_EVENT + Constants.EVENT_NS, dragMove).off(Constants.TOUCH_END_EVENT + Constants.EVENT_NS, dragEnd);\n                isDragging = false;\n            };\n            $(dragHandle).on(Constants.TOUCH_START_EVENT + Constants.EVENT_NS, dragStart);\n            */\n            var self = this;\n            _movable($(modal)[0],{\n                handle : $(dragHandle)[0],\n                starting : function(e) {\n                    const elemCancel = $(e.target).closest(dragCancel);\n                    if (elemCancel.length) {\n                        return false;\n                    }\n                    if (Constants.PUBLIC_VARS['isResizing'] || self.isMaximized) {\n                        return false;\n                    }\n\n                    return true;\n                }\n            });\n        }\n    };\n});\ndefine('skylark-photoviewer/movable',[\n    \"skylark-domx-eventer\",\n    \"skylark-domx-plugins-interact/movable\",\n    './domq',\n    './constants'\n], function (eventer,_movable,$, Constants) {\n    'use strict';\n    const ELEMS_WITH_GRABBING_CURSOR = `html, body, .${ Constants.NS }-modal, .${ Constants.NS }-stage, .${ Constants.NS }-button, .${ Constants.NS }-resizable-handle`;\n    return {\n        movable(stage, image) {\n            /*\n            let isDragging = false;\n            let startX = 0;\n            let startY = 0;\n            let left = 0;\n            let top = 0;\n            let widthDiff = 0;\n            let heightDiff = 0;\n            let δ = 0;\n            const dragStart = e => {\n                e = e || window.event;\n                e.preventDefault();\n                const imageWidth = $(image).width();\n                const imageHeight = $(image).height();\n                const stageWidth = $(stage).width();\n                const stageHeight = $(stage).height();\n                startX = e.type === 'touchstart' ? e.targetTouches[0].pageX : e.clientX;\n                startY = e.type === 'touchstart' ? e.targetTouches[0].pageY : e.clientY;\n                δ = !this.isRotated ? 0 : (imageWidth - imageHeight) / 2;\n                widthDiff = !this.isRotated ? imageWidth - stageWidth : imageHeight - stageWidth;\n                heightDiff = !this.isRotated ? imageHeight - stageHeight : imageWidth - stageHeight;\n                isDragging = widthDiff > 0 || heightDiff > 0 ? true : false;\n                Constants.PUBLIC_VARS['isMoving'] = widthDiff > 0 || heightDiff > 0 ? true : false;\n                left = $(image).position().left - δ;\n                top = $(image).position().top + δ;\n                if (stage.hasClass('is-grab')) {\n                    $(ELEMS_WITH_GRABBING_CURSOR).addClass('is-grabbing');\n                }\n                Constants.$D.on(Constants.TOUCH_MOVE_EVENT + Constants.EVENT_NS, dragMove).on(Constants.TOUCH_END_EVENT + Constants.EVENT_NS, dragEnd);\n            };\n            const dragMove = e => {\n                e = e || window.event;\n                e.preventDefault();\n                if (isDragging) {\n                    const endX = e.type === 'touchmove' ? e.targetTouches[0].pageX : e.clientX;\n                    const endY = e.type === 'touchmove' ? e.targetTouches[0].pageY : e.clientY;\n                    const relativeX = endX - startX;\n                    const relativeY = endY - startY;\n                    let newLeft = relativeX + left;\n                    let newTop = relativeY + top;\n                    if (heightDiff > 0) {\n                        if (relativeY + top > δ) {\n                            newTop = δ;\n                        } else if (relativeY + top < -heightDiff + δ) {\n                            newTop = -heightDiff + δ;\n                        }\n                    } else {\n                        newTop = top;\n                    }\n                    if (widthDiff > 0) {\n                        if (relativeX + left > -δ) {\n                            newLeft = -δ;\n                        } else if (relativeX + left < -widthDiff - δ) {\n                            newLeft = -widthDiff - δ;\n                        }\n                    } else {\n                        newLeft = left;\n                    }\n                    $(image).css({\n                        left: newLeft + 'px',\n                        top: newTop + 'px'\n                    });\n                    $.extend(this.imageData, {\n                        left: newLeft,\n                        top: newTop\n                    });\n                }\n            };\n            const dragEnd = () => {\n                Constants.$D.off(Constants.TOUCH_MOVE_EVENT + Constants.EVENT_NS, dragMove).off(Constants.TOUCH_END_EVENT + Constants.EVENT_NS, dragEnd);\n                isDragging = false;\n                Constants.PUBLIC_VARS['isMoving'] = false;\n                $(ELEMS_WITH_GRABBING_CURSOR).removeClass('is-grabbing');\n            };\n            $(stage).on(Constants.TOUCH_START_EVENT + Constants.EVENT_NS, dragStart);\n            */\n            \n            \n\n            return _movable(image[0],{\n                starting : function(e) {\n                    if (stage.hasClass('is-grab')) {\n\n                    } else {\n                        return false;\n                    }\n                    const imageWidth = $(image).width();\n                    const imageHeight = $(image).height();\n                    const stageWidth = $(stage).width();\n                    const stageHeight = $(stage).height();\n                    let minX,minY,maxX,maxY;\n\n                    if (stageWidth>=imageWidth) {\n                        minX=maxX=(stageWidth-imageWidth) / 2;\n                    } else {\n                        minX = stageWidth - imageWidth;\n                        maxX = 0;\n                    }\n\n                    if (stageHeight>=imageHeight) {\n                        minY=maxY=(stageHeight-imageHeight) / 2;\n                    } else {\n                        minY = stageHeight - imageHeight;\n                        maxY = 0;\n                    }\n\n                    return {\n                        constraints : {\n                             minX,\n                            maxX,\n                            minY,\n                            maxY\n                        }\n                    };\n                },\n                started : function(e) {\n                    eventer.stop(e);\n                }\n            });\n        }\n    };\n});\ndefine('skylark-photoviewer/resizable',[\n    \"skylark-domx-eventer\",\n    \"skylark-domx-plugins-interact/resizable\",\n    './domq',\n    './constants',\n    './utilities'\n], function (eventer,_Resizable,$, Constants, Utilities) {\n    'use strict';\n    const ELEMS_WITH_RESIZE_CURSOR = `html, body, .${ Constants.NS }-modal, .${ Constants.NS }-stage, .${ Constants.NS }-button`;\n    return {\n        resizable(modal, stage, image, minWidth, minHeight) {\n            /*\n            const resizableHandleE = $(`<div class=\"${ Constants.NS }-resizable-handle ${ Constants.NS }-resizable-handle-e\"></div>`);\n            const resizableHandleW = $(`<div class=\"${ Constants.NS }-resizable-handle ${ Constants.NS }-resizable-handle-w\"></div>`);\n            const resizableHandleS = $(`<div class=\"${ Constants.NS }-resizable-handle ${ Constants.NS }-resizable-handle-s\"></div>`);\n            const resizableHandleN = $(`<div class=\"${ Constants.NS }-resizable-handle ${ Constants.NS }-resizable-handle-n\"></div>`);\n            const resizableHandleSE = $(`<div class=\"${ Constants.NS }-resizable-handle ${ Constants.NS }-resizable-handle-se\"></div>`);\n            const resizableHandleSW = $(`<div class=\"${ Constants.NS }-resizable-handle ${ Constants.NS }-resizable-handle-sw\"></div>`);\n            const resizableHandleNE = $(`<div class=\"${ Constants.NS }-resizable-handle ${ Constants.NS }-resizable-handle-ne\"></div>`);\n            const resizableHandleNW = $(`<div class=\"${ Constants.NS }-resizable-handle ${ Constants.NS }-resizable-handle-nw\"></div>`);\n            const resizableHandles = {\n                e: resizableHandleE,\n                s: resizableHandleS,\n                se: resizableHandleSE,\n                n: resizableHandleN,\n                w: resizableHandleW,\n                nw: resizableHandleNW,\n                ne: resizableHandleNE,\n                sw: resizableHandleSW\n            };\n            $(modal).append(resizableHandleE, resizableHandleW, resizableHandleS, resizableHandleN, resizableHandleSE, resizableHandleSW, resizableHandleNE, resizableHandleNW);\n            let isDragging = false;\n            let startX = 0;\n            let startY = 0;\n            let modalData = {\n                w: 0,\n                h: 0,\n                l: 0,\n                t: 0\n            };\n            let stageData = {\n                w: 0,\n                h: 0,\n                l: 0,\n                t: 0\n            };\n            let imageData = {\n                w: 0,\n                h: 0,\n                l: 0,\n                t: 0\n            };\n            let δ = 0;\n            let imgWidth = 0;\n            let imgHeight = 0;\n            let direction = '';\n            const getModalOpts = function (dir, offsetX, offsetY) {\n                const modalLeft = -offsetX + modalData.w > minWidth ? offsetX + modalData.l : modalData.l + modalData.w - minWidth;\n                const modalTop = -offsetY + modalData.h > minHeight ? offsetY + modalData.t : modalData.t + modalData.h - minHeight;\n                const opts = {\n                    e: { width: Math.max(offsetX + modalData.w, minWidth) + 'px' },\n                    s: { height: Math.max(offsetY + modalData.h, minHeight) + 'px' },\n                    se: {\n                        width: Math.max(offsetX + modalData.w, minWidth) + 'px',\n                        height: Math.max(offsetY + modalData.h, minHeight) + 'px'\n                    },\n                    w: {\n                        width: Math.max(-offsetX + modalData.w, minWidth) + 'px',\n                        left: modalLeft + 'px'\n                    },\n                    n: {\n                        height: Math.max(-offsetY + modalData.h, minHeight) + 'px',\n                        top: modalTop + 'px'\n                    },\n                    nw: {\n                        width: Math.max(-offsetX + modalData.w, minWidth) + 'px',\n                        height: Math.max(-offsetY + modalData.h, minHeight) + 'px',\n                        top: modalTop + 'px',\n                        left: modalLeft + 'px'\n                    },\n                    ne: {\n                        width: Math.max(offsetX + modalData.w, minWidth) + 'px',\n                        height: Math.max(-offsetY + modalData.h, minHeight) + 'px',\n                        top: modalTop + 'px'\n                    },\n                    sw: {\n                        width: Math.max(-offsetX + modalData.w, minWidth) + 'px',\n                        height: Math.max(offsetY + modalData.h, minHeight) + 'px',\n                        left: modalLeft + 'px'\n                    }\n                };\n                return opts[dir];\n            };\n            const getImageOpts = function (dir, offsetX, offsetY) {\n                const widthDiff = offsetX + modalData.w > minWidth ? stageData.w - imgWidth + offsetX - δ : minWidth - (modalData.w - stageData.w) - imgWidth - δ;\n                const heightDiff = offsetY + modalData.h > minHeight ? stageData.h - imgHeight + offsetY + δ : minHeight - (modalData.h - stageData.h) - imgHeight + δ;\n                const widthDiff2 = -offsetX + modalData.w > minWidth ? stageData.w - imgWidth - offsetX - δ : minWidth - (modalData.w - stageData.w) - imgWidth - δ;\n                const heightDiff2 = -offsetY + modalData.h > minHeight ? stageData.h - imgHeight - offsetY + δ : minHeight - (modalData.h - stageData.h) - imgHeight + δ;\n                const imgLeft = (widthDiff > 0 ? $(image).position().left : $(image).position().left < 0 ? $(image).position().left : 0) - δ;\n                const imgTop = (heightDiff > 0 ? $(image).position().top : $(image).position().top < 0 ? $(image).position().top : 0) + δ;\n                const imgLeft2 = (widthDiff2 > 0 ? $(image).position().left : $(image).position().left < 0 ? $(image).position().left : 0) - δ;\n                const imgTop2 = (heightDiff2 > 0 ? $(image).position().top : $(image).position().top < 0 ? $(image).position().top : 0) + δ;\n                const opts = {\n                    e: { left: widthDiff >= -δ ? (widthDiff - δ) / 2 + 'px' : imgLeft > widthDiff ? imgLeft + 'px' : widthDiff + 'px' },\n                    s: { top: heightDiff >= δ ? (heightDiff + δ) / 2 + 'px' : imgTop > heightDiff ? imgTop + 'px' : heightDiff + 'px' },\n                    se: {\n                        top: heightDiff >= δ ? (heightDiff + δ) / 2 + 'px' : imgTop > heightDiff ? imgTop + 'px' : heightDiff + 'px',\n                        left: widthDiff >= -δ ? (widthDiff - δ) / 2 + 'px' : imgLeft > widthDiff ? imgLeft + 'px' : widthDiff + 'px'\n                    },\n                    w: { left: widthDiff2 >= -δ ? (widthDiff2 - δ) / 2 + 'px' : imgLeft2 > widthDiff2 ? imgLeft2 + 'px' : widthDiff2 + 'px' },\n                    n: { top: heightDiff2 >= δ ? (heightDiff2 + δ) / 2 + 'px' : imgTop2 > heightDiff2 ? imgTop2 + 'px' : heightDiff2 + 'px' },\n                    nw: {\n                        top: heightDiff2 >= δ ? (heightDiff2 + δ) / 2 + 'px' : imgTop2 > heightDiff2 ? imgTop2 + 'px' : heightDiff2 + 'px',\n                        left: widthDiff2 >= -δ ? (widthDiff2 - δ) / 2 + 'px' : imgLeft2 > widthDiff2 ? imgLeft2 + 'px' : widthDiff2 + 'px'\n                    },\n                    ne: {\n                        top: heightDiff2 >= δ ? (heightDiff2 + δ) / 2 + 'px' : imgTop2 > heightDiff2 ? imgTop2 + 'px' : heightDiff2 + 'px',\n                        left: widthDiff >= -δ ? (widthDiff - δ) / 2 + 'px' : imgLeft > widthDiff ? imgLeft + 'px' : widthDiff + 'px'\n                    },\n                    sw: {\n                        top: heightDiff >= δ ? (heightDiff + δ) / 2 + 'px' : imgTop > heightDiff ? imgTop + 'px' : heightDiff + 'px',\n                        left: widthDiff2 >= -δ ? (widthDiff2 - δ) / 2 + 'px' : imgLeft2 > widthDiff2 ? imgLeft2 + 'px' : widthDiff2 + 'px'\n                    }\n                };\n                return opts[dir];\n            };\n            const dragStart = (dir, e) => {\n                e = e || window.event;\n                e.preventDefault();\n                isDragging = true;\n                Constants.PUBLIC_VARS['isResizing'] = true;\n                startX = e.type === 'touchstart' ? e.targetTouches[0].pageX : e.clientX;\n                startY = e.type === 'touchstart' ? e.targetTouches[0].pageY : e.clientY;\n                modalData = {\n                    w: $(modal).width(),\n                    h: $(modal).height(),\n                    l: $(modal).offset().left,\n                    t: $(modal).offset().top\n                };\n                stageData = {\n                    w: $(stage).width(),\n                    h: $(stage).height(),\n                    l: $(stage).offset().left,\n                    t: $(stage).offset().top\n                };\n                imageData = {\n                    w: $(image).width(),\n                    h: $(image).height(),\n                    l: $(image).position().left,\n                    t: $(image).position().top\n                };\n                δ = !this.isRotated ? 0 : (imageData.w - imageData.h) / 2;\n                imgWidth = !this.isRotated ? imageData.w : imageData.h;\n                imgHeight = !this.isRotated ? imageData.h : imageData.w;\n                direction = dir;\n                $(ELEMS_WITH_RESIZE_CURSOR).css('cursor', dir + '-resize');\n                Constants.$D.on(Constants.TOUCH_MOVE_EVENT + Constants.EVENT_NS, dragMove).on(Constants.TOUCH_END_EVENT + Constants.EVENT_NS, dragEnd);\n            };\n            const dragMove = e => {\n                e = e || window.event;\n                e.preventDefault();\n                if (isDragging && !this.isMaximized) {\n                    const endX = e.type === 'touchmove' ? e.targetTouches[0].pageX : e.clientX;\n                    const endY = e.type === 'touchmove' ? e.targetTouches[0].pageY : e.clientY;\n                    const relativeX = endX - startX;\n                    const relativeY = endY - startY;\n                    const modalOpts = getModalOpts(direction, relativeX, relativeY);\n                    $(modal).css(modalOpts);\n                    const imageOpts = getImageOpts(direction, relativeX, relativeY);\n                    $(image).css(imageOpts);\n                    this.isDoResize = true;\n                }\n            };\n            const dragEnd = () => {\n                Constants.$D.off(Constants.TOUCH_MOVE_EVENT + Constants.EVENT_NS, dragMove).off(Constants.TOUCH_END_EVENT + Constants.EVENT_NS, dragEnd);\n                if (Constants.PUBLIC_VARS['isResizing']) {\n                    Utilities.setGrabCursor({\n                        w: imgWidth,\n                        h: imgHeight\n                    }, {\n                        w: $(stage).width(),\n                        h: $(stage).height()\n                    }, stage);\n                }\n                isDragging = false;\n                Constants.PUBLIC_VARS['isResizing'] = false;\n                $(ELEMS_WITH_RESIZE_CURSOR).css('cursor', '');\n                const scale = this.getImageScaleToStage($(stage).width(), $(stage).height());\n                $.extend(this.imageData, {\n                    initWidth: this.img.width * scale,\n                    initHeight: this.img.height * scale,\n                    initLeft: ($(stage).width() - this.img.width * scale) / 2,\n                    initTop: ($(stage).height() - this.img.height * scale) / 2\n                });\n            };\n            $.each(resizableHandles, function (dir, handle) {\n                handle.on(Constants.TOUCH_START_EVENT + Constants.EVENT_NS, function (e) {\n                    dragStart(dir, e);\n                });\n            });\n            */\n            let self = this;\n            let resizer = new _Resizable($(modal)[0],{\n                handle : {\n                    border : {\n                        directions : {\n                            top: true, //n\n                            left: true, //w\n                            right: true, //e\n                            bottom: true, //s\n                            topLeft : true, // nw\n                            topRight : true, // ne\n                            bottomLeft : true, // sw\n                            bottomRight : true // se                         \n                        },\n                        classes : {\n                            all : `${ Constants.NS }-resizable-handle`,\n                            top : `${ Constants.NS }-resizable-handle-n`,\n                            left: `${ Constants.NS }-resizable-handle-w`,\n                            right: `${ Constants.NS }-resizable-handle-e`,\n                            bottom: `${ Constants.NS }-resizable-handle-s`, \n                            topLeft : `${ Constants.NS }-resizable-handle-nw`, \n                            topRight : `${ Constants.NS }-resizable-handle-ne`,\n                            bottomLeft : `${ Constants.NS }-resizable-handle-sw`,             \n                            bottomRight : `${ Constants.NS }-resizable-handle-se`                         \n                        }                        \n                    }\n                },\n                constraints : {\n                    minWidth,\n                    minHeight\n                },\n                started : function(){\n                    Constants.PUBLIC_VARS['isResizing'] = true;\n                },\n                moving : function(e) {\n                    const imageWidth = $(image).width();\n                    const imageHeight = $(image).height();\n                    const stageWidth = $(stage).width();\n                    const stageHeight = $(stage).height();\n                    const left = (stageWidth - imageWidth) /2;\n                    const top = (stageHeight- imageHeight) /2;\n                    $(image).css({\n                        left,\n                        top\n                    });\n                },\n                stopped :function () {\n                    Constants.PUBLIC_VARS['isResizing'] = false;\n                }\n            });\n        }\n    };\n});\ndefine('skylark-photoviewer/core',[\n    './domq',\n    './defaults',\n    './constants',\n    './utilities',\n    './draggable',\n    './movable',\n    './resizable'\n], function ($, DEFAULTS, Constants, Utilities, draggable, movable, resizable) {\n    'use strict';\n    class PhotoViewer {\n        constructor(items, options, el) {\n            this.options = $.extend(true, {}, DEFAULTS, options);\n            if (options && $.isArray(options.footerToolbar)) {\n                this.options.footerToolbar = options.footerToolbar;\n            }\n            if (options && $.isArray(options.headerToolbar)) {\n                this.options.headerToolbar = options.headerToolbar;\n            }\n            this.$el = $(el);\n            this.isOpened = false;\n            this.isMaximized = false;\n            this.isRotated = false;\n            this.rotateAngle = 0;\n            this.isDoResize = false;\n            this.imageData = {};\n            this.modalData = {\n                width: null,\n                height: null,\n                left: null,\n                top: null\n            };\n            this.init(items, this.options);\n        }\n        init(items, opts) {\n            this.groupData = items;\n            this.groupIndex = opts['index'];\n            Constants.PUBLIC_VARS['zIndex'] = Constants.PUBLIC_VARS['zIndex'] === 0 ? opts['zIndex'] : Constants.PUBLIC_VARS['zIndex'];\n            const imgSrc = items[this.groupIndex]['src'];\n            this.open();\n            this.loadImage(imgSrc);\n            if (opts.draggable) {\n                this.draggable(this.$photoviewer, this.dragHandle, Constants.CLASS_NS + '-button');\n            }\n            if (opts.movable) {\n                this.movable(this.$stage, this.$image);\n            }\n            if (opts.resizable) {\n                this.resizable(this.$photoviewer, this.$stage, this.$image, opts.modalWidth, opts.modalHeight);\n            }\n        }\n        _createBtns(toolbar) {\n            const btns = [\n                'minimize',\n                'maximize',\n                'close',\n                'zoomIn',\n                'zoomOut',\n                'prev',\n                'next',\n                'fullscreen',\n                'actualSize',\n                'rotateLeft',\n                'rotateRight'\n            ];\n            let btnsHTML = '';\n            $.each(toolbar, (index, item) => {\n                const btnClass = `${ Constants.NS }-button ${ Constants.NS }-button-${ item }`;\n                if (btns.indexOf(item) >= 0) {\n                    btnsHTML += `<button class=\"${ btnClass }\" title=\"${ this.options.i18n[item] }\">\n          ${ this.options.icons[item] }\n          </button>`;\n                } else if (this.options.customButtons[item]) {\n                    btnsHTML += `<button class=\"${ btnClass }\" title=\"${ this.options.customButtons[item].title || '' }\">\n          ${ this.options.customButtons[item].text }\n          </button>`;\n                }\n            });\n            return btnsHTML;\n        }\n        _createTitle() {\n            return this.options.title ? `<div class=\"${ Constants.NS }-title\"></div>` : '';\n        }\n        _createTemplate() {\n            const photoviewerHTML = `<div class=\"${ Constants.NS }-modal\" tabindex=\"0\">\n        <div class=\"${ Constants.NS }-inner\">\n          <div class=\"${ Constants.NS }-header\">\n            <div class=\"${ Constants.NS }-toolbar ${ Constants.NS }-toolbar-header\">\n            ${ this._createBtns(this.options.headerToolbar) }\n            </div>\n            ${ this._createTitle() }\n          </div>\n          <div class=\"${ Constants.NS }-stage\">\n            <img class=\"${ Constants.NS }-image\" src=\"\" alt=\"\" />\n          </div>\n          <div class=\"${ Constants.NS }-footer\">\n            <div class=\"${ Constants.NS }-toolbar ${ Constants.NS }-toolbar-footer\">\n            ${ this._createBtns(this.options.footerToolbar) }\n            </div>\n          </div>\n        </div>\n      </div>`;\n            return photoviewerHTML;\n        }\n        build() {\n            const photoviewerHTML = this._createTemplate();\n            const $photoviewer = $(photoviewerHTML);\n            this.$photoviewer = $photoviewer;\n            this.$stage = $photoviewer.find(Constants.CLASS_NS + '-stage');\n            this.$title = $photoviewer.find(Constants.CLASS_NS + '-title');\n            this.$image = $photoviewer.find(Constants.CLASS_NS + '-image');\n            this.$close = $photoviewer.find(Constants.CLASS_NS + '-button-close');\n            this.$maximize = $photoviewer.find(Constants.CLASS_NS + '-button-maximize');\n            this.$minimize = $photoviewer.find(Constants.CLASS_NS + '-button-minimize');\n            this.$zoomIn = $photoviewer.find(Constants.CLASS_NS + '-button-zoomIn');\n            this.$zoomOut = $photoviewer.find(Constants.CLASS_NS + '-button-zoomOut');\n            this.$actualSize = $photoviewer.find(Constants.CLASS_NS + '-button-actualSize');\n            this.$fullscreen = $photoviewer.find(Constants.CLASS_NS + '-button-fullscreen');\n            this.$rotateLeft = $photoviewer.find(Constants.CLASS_NS + '-button-rotateLeft');\n            this.$rotateRight = $photoviewer.find(Constants.CLASS_NS + '-button-rotateRight');\n            this.$prev = $photoviewer.find(Constants.CLASS_NS + '-button-prev');\n            this.$next = $photoviewer.find(Constants.CLASS_NS + '-button-next');\n            this.$stage.addClass('stage-ready');\n            this.$image.addClass('image-ready');\n            this.$photoviewer.css('z-index', Constants.PUBLIC_VARS['zIndex']);\n            if (!this.options.dragHandle || this.options.dragHandle === Constants.CLASS_NS + '-modal') {\n                this.dragHandle = this.$photoviewer;\n            } else {\n                this.dragHandle = this.$photoviewer.find(this.options.dragHandle);\n            }\n            $(this.options.appendTo).eq(0).append(this.$photoviewer);\n            this._addEvents();\n            this._addCustomButtonEvents();\n        }\n        open() {\n            this._triggerHook('beforeOpen', this);\n            if (!this.options.multiInstances) {\n                $(Constants.CLASS_NS + '-modal').eq(0).remove();\n            }\n            if (!$(Constants.CLASS_NS + '-modal').length && this.options.fixedContent) {\n                $('html').css({ overflow: 'hidden' });\n                if (Utilities.hasScrollbar()) {\n                    const scrollbarWidth = Utilities.getScrollbarWidth();\n                    if (scrollbarWidth) {\n                        $('html').css({ 'padding-right': scrollbarWidth });\n                    }\n                }\n            }\n            this.build();\n            this.setModalPos(this.$photoviewer);\n            this.$photoviewer.get(0).focus();\n            this._triggerHook('opened', this);\n        }\n        close() {\n            this._triggerHook('beforeClose', this);\n            this.$photoviewer.remove();\n            this.isOpened = false;\n            this.isMaximized = false;\n            this.isRotated = false;\n            this.rotateAngle = 0;\n            if (!$(Constants.CLASS_NS + '-modal').length) {\n                if (this.options.fixedContent) {\n                    $('html').css({\n                        overflow: '',\n                        'padding-right': ''\n                    });\n                }\n                if (this.options.multiInstances) {\n                    Constants.PUBLIC_VARS['zIndex'] = this.options.zIndex;\n                }\n                Constants.$W.off(Constants.RESIZE_EVENT + Constants.EVENT_NS);\n            }\n            this._triggerHook('closed', this);\n        }\n        setModalPos(modal) {\n            const winWidth = Constants.$W.width();\n            const winHeight = Constants.$W.height();\n            const scrollLeft = Constants.$D.scrollLeft();\n            const scrollTop = Constants.$D.scrollTop();\n            const modalWidth = this.options.modalWidth;\n            const modalHeight = this.options.modalHeight;\n            if (this.options.initMaximized) {\n                modal.addClass(Constants.NS + '-maximize');\n                modal.css({\n                    width: '100%',\n                    height: '100%',\n                    left: 0,\n                    top: 0\n                });\n                this.isOpened = true;\n                this.isMaximized = true;\n            } else {\n                modal.css({\n                    width: modalWidth,\n                    height: modalHeight,\n                    left: (winWidth - modalWidth) / 2 + scrollLeft + 'px',\n                    top: (winHeight - modalHeight) / 2 + scrollTop + 'px'\n                });\n            }\n        }\n        setModalSize(img) {\n            const winWidth = Constants.$W.width();\n            const winHeight = Constants.$W.height();\n            const scrollLeft = Constants.$D.scrollLeft();\n            const scrollTop = Constants.$D.scrollTop();\n            const stageCSS = {\n                left: this.$stage.css('left'),\n                right: this.$stage.css('right'),\n                top: this.$stage.css('top'),\n                bottom: this.$stage.css('bottom'),\n                borderLeft: this.$stage.css('border-left-width'),\n                borderRight: this.$stage.css('border-right-width'),\n                borderTop: this.$stage.css('border-top-width'),\n                borderBottom: this.$stage.css('border-bottom-width')\n            };\n            const modalWidth = img.width + parseFloat(stageCSS.left) + parseFloat(stageCSS.right) + parseFloat(stageCSS.borderLeft) + parseFloat(stageCSS.borderRight);\n            const modalHeight = img.height + parseFloat(stageCSS.top) + parseFloat(stageCSS.bottom) + parseFloat(stageCSS.borderTop) + parseFloat(stageCSS.borderBottom);\n            const gapThreshold = (this.options.gapThreshold > 0 ? this.options.gapThreshold : 0) + 1;\n            const scale = Math.min(winWidth / (modalWidth * gapThreshold), winHeight / (modalHeight * gapThreshold), 1);\n            let minWidth = Math.max(modalWidth * scale, this.options.modalWidth);\n            let minHeight = Math.max(modalHeight * scale, this.options.modalHeight);\n            minWidth = this.options.fixedModalSize ? this.options.modalWidth : Math.round(minWidth);\n            minHeight = this.options.fixedModalSize ? this.options.modalHeight : Math.round(minHeight);\n            const modalCSSObj = {\n                width: minWidth + 'px',\n                height: minHeight + 'px',\n                left: (winWidth - minWidth) / 2 + scrollLeft + 'px',\n                top: (winHeight - minHeight) / 2 + scrollTop + 'px'\n            };\n            if (this.options.initAnimation) {\n                this.$photoviewer.animate(modalCSSObj, 400, 'ease-in-out', () => {\n                    this.setImageSize(img);\n                });\n            } else {\n                this.$photoviewer.css(modalCSSObj);\n                this.setImageSize(img);\n            }\n            this.isOpened = true;\n        }\n        getImageScaleToStage(stageWidth, stageHeight) {\n            let scale = 1;\n            if (!this.isRotated) {\n                scale = Math.min(stageWidth / this.img.width, stageHeight / this.img.height, 1);\n            } else {\n                scale = Math.min(stageWidth / this.img.height, stageHeight / this.img.width, 1);\n            }\n            return scale;\n        }\n        setImageSize(img) {\n            const stageData = {\n                w: this.$stage.width(),\n                h: this.$stage.height()\n            };\n            const scale = this.getImageScaleToStage(stageData.w, stageData.h);\n            this.$image.css({\n                width: Math.ceil(img.width * scale) + 'px',\n                height: Math.ceil(img.height * scale) + 'px',\n                left: (stageData.w - Math.ceil(img.width * scale)) / 2 + 'px',\n                top: (stageData.h - Math.ceil(img.height * scale)) / 2 + 'px'\n            });\n            $.extend(this.imageData, {\n                initWidth: img.width * scale,\n                initHeight: img.height * scale,\n                initLeft: (stageData.w - img.width * scale) / 2,\n                initTop: (stageData.h - img.height * scale) / 2,\n                width: img.width * scale,\n                height: img.height * scale,\n                left: (stageData.w - img.width * scale) / 2,\n                top: (stageData.h - img.height * scale) / 2\n            });\n            Utilities.setGrabCursor({\n                w: this.$image.width(),\n                h: this.$image.height()\n            }, {\n                w: this.$stage.width(),\n                h: this.$stage.height()\n            }, this.$stage, this.isRotated);\n            if (!this.imageLoaded) {\n                this.$photoviewer.find(Constants.CLASS_NS + '-loader').remove();\n                this.$stage.removeClass('stage-ready');\n                this.$image.removeClass('image-ready');\n                if (this.options.initAnimation && !this.options.progressiveLoading) {\n                    this.$image.fadeIn();\n                }\n                this.imageLoaded = true;\n            }\n        }\n        loadImage(imgSrc, fn, err) {\n            this.$image.removeAttr('style').attr('src', '');\n            this.isRotated = false;\n            this.rotateAngle = 0;\n            this.imageLoaded = false;\n            this.$photoviewer.append(`<div class=\"${ Constants.NS }-loader\"></div>`);\n            this.$stage.addClass('stage-ready');\n            this.$image.addClass('image-ready');\n            if (this.options.initAnimation && !this.options.progressiveLoading) {\n                this.$image.hide();\n            }\n            this.$image.attr('src', imgSrc);\n            Utilities.preloadImage(imgSrc, img => {\n                this.img = img;\n                this.imageData = {\n                    originalWidth: img.width,\n                    originalHeight: img.height\n                };\n                if (this.isMaximized || this.isOpened && this.options.fixedModalPos) {\n                    this.setImageSize(img);\n                } else {\n                    this.setModalSize(img);\n                }\n                if (fn) {\n                    fn.call();\n                }\n            }, () => {\n                this.$photoviewer.find(Constants.CLASS_NS + '-loader').remove();\n                if (err) {\n                    err.call();\n                }\n            });\n            if (this.options.title) {\n                this.setImageTitle(imgSrc);\n            }\n        }\n        setImageTitle(url) {\n            const title = this.groupData[this.groupIndex].title || Utilities.getImageNameFromUrl(url);\n            this.$title.html(title);\n        }\n        jump(step) {\n            this._triggerHook('beforeChange', [\n                this,\n                this.groupIndex\n            ]);\n            this.groupIndex = this.groupIndex + step;\n            this.jumpTo(this.groupIndex);\n        }\n        jumpTo(index) {\n            index = index % this.groupData.length;\n            if (index >= 0) {\n                index = index % this.groupData.length;\n            } else if (index < 0) {\n                index = (this.groupData.length + index) % this.groupData.length;\n            }\n            this.groupIndex = index;\n            this.loadImage(this.groupData[index].src, () => {\n                this._triggerHook('changed', [\n                    this,\n                    index\n                ]);\n            }, () => {\n                this._triggerHook('changed', [\n                    this,\n                    index\n                ]);\n            });\n        }\n        wheel(e) {\n            e.preventDefault();\n            let delta = 1;\n            if (e.deltaY) {\n                delta = e.deltaY > 0 ? 1 : -1;\n            } else if (e.wheelDelta) {\n                delta = -e.wheelDelta / 120;\n            } else if (e.detail) {\n                delta = e.detail > 0 ? 1 : -1;\n            }\n            const ratio = -delta * this.options.ratioThreshold;\n            const pointer = {\n                x: e.clientX - this.$stage.offset().left + Constants.$D.scrollLeft(),\n                y: e.clientY - this.$stage.offset().top + Constants.$D.scrollTop()\n            };\n            this.zoom(ratio, pointer, e);\n        }\n        zoom(ratio, origin, e) {\n            ratio = ratio < 0 ? 1 / (1 - ratio) : 1 + ratio;\n            ratio = this.$image.width() / this.imageData.originalWidth * ratio;\n            if (ratio > this.options.maxRatio || ratio < this.options.minRatio) {\n                return;\n            }\n            this.zoomTo(ratio, origin, e);\n        }\n        zoomTo(ratio, origin, e) {\n            const $image = this.$image;\n            const $stage = this.$stage;\n            const imgData = {\n                w: this.imageData.width,\n                h: this.imageData.height,\n                x: this.imageData.left,\n                y: this.imageData.top\n            };\n            const stageData = {\n                w: $stage.width(),\n                h: $stage.height(),\n                x: $stage.offset().left,\n                y: $stage.offset().top\n            };\n            const newWidth = this.imageData.originalWidth * ratio;\n            const newHeight = this.imageData.originalHeight * ratio;\n            let newLeft = origin.x - (origin.x - imgData.x) / imgData.w * newWidth;\n            let newTop = origin.y - (origin.y - imgData.y) / imgData.h * newHeight;\n            const δ = !this.isRotated ? 0 : (newWidth - newHeight) / 2;\n            const imgNewWidth = !this.isRotated ? newWidth : newHeight;\n            const imgNewHeight = !this.isRotated ? newHeight : newWidth;\n            const offsetX = stageData.w - newWidth;\n            const offsetY = stageData.h - newHeight;\n            if (imgNewHeight <= stageData.h) {\n                newTop = (stageData.h - newHeight) / 2;\n            } else {\n                newTop = newTop > δ ? δ : newTop > offsetY - δ ? newTop : offsetY - δ;\n            }\n            if (imgNewWidth <= stageData.w) {\n                newLeft = (stageData.w - newWidth) / 2;\n            } else {\n                newLeft = newLeft > -δ ? -δ : newLeft > offsetX + δ ? newLeft : offsetX + δ;\n            }\n            if (Math.abs(this.imageData.initWidth - newWidth) < this.imageData.initWidth * 0.05) {\n                this.setImageSize(this.img);\n            } else {\n                $image.css({\n                    width: Math.round(newWidth) + 'px',\n                    height: Math.round(newHeight) + 'px',\n                    left: Math.round(newLeft) + 'px',\n                    top: Math.round(newTop) + 'px'\n                });\n                Utilities.setGrabCursor({\n                    w: Math.round(imgNewWidth),\n                    h: Math.round(imgNewHeight)\n                }, {\n                    w: stageData.w,\n                    h: stageData.h\n                }, this.$stage);\n            }\n            $.extend(this.imageData, {\n                width: newWidth,\n                height: newHeight,\n                left: newLeft,\n                top: newTop\n            });\n        }\n        rotate(angle) {\n            this.rotateAngle = this.rotateAngle + angle;\n            if (this.rotateAngle / 90 % 2 === 0) {\n                this.isRotated = false;\n            } else {\n                this.isRotated = true;\n            }\n            this.rotateTo(this.rotateAngle);\n        }\n        rotateTo(angle) {\n            this.$image.css({ transform: 'rotate(' + angle + 'deg)' });\n            this.setImageSize({\n                width: this.imageData.originalWidth,\n                height: this.imageData.originalHeight\n            });\n            this.$stage.removeClass('is-grab');\n        }\n        resize() {\n            const resizeHandler = Utilities.throttle(() => {\n                if (this.isOpened) {\n                    if (this.isMaximized) {\n                        this.setImageSize({\n                            width: this.imageData.originalWidth,\n                            height: this.imageData.originalHeight\n                        });\n                    } else {\n                        this.setModalSize({\n                            width: this.imageData.originalWidth,\n                            height: this.imageData.originalHeight\n                        });\n                    }\n                }\n            }, 500);\n            return resizeHandler;\n        }\n        maximize() {\n            this.$photoviewer.get(0).focus();\n            if (!this.isMaximized) {\n                this.modalData = {\n                    width: this.$photoviewer.width(),\n                    height: this.$photoviewer.height(),\n                    left: this.$photoviewer.offset().left,\n                    top: this.$photoviewer.offset().top\n                };\n                this.$photoviewer.addClass(Constants.NS + '-maximize');\n                this.$photoviewer.css({\n                    width: '100%',\n                    height: '100%',\n                    left: 0,\n                    top: 0\n                });\n                this.isMaximized = true;\n            } else {\n                this.$photoviewer.removeClass(Constants.NS + '-maximize');\n                const initModalLeft = (Constants.$W.width() - this.options.modalWidth) / 2 + Constants.$D.scrollLeft();\n                const initModalTop = (Constants.$W.height() - this.options.modalHeight) / 2 + Constants.$D.scrollTop();\n                this.$photoviewer.css({\n                    width: this.modalData.width ? this.modalData.width : this.options.modalWidth,\n                    height: this.modalData.height ? this.modalData.height : this.options.modalHeight,\n                    left: this.modalData.left ? this.modalData.left : initModalLeft,\n                    top: this.modalData.top ? this.modalData.top : initModalTop\n                });\n                this.isMaximized = false;\n            }\n            this.setImageSize({\n                width: this.imageData.originalWidth,\n                height: this.imageData.originalHeight\n            });\n        }\n        fullscreen() {\n            this.$photoviewer.get(0).focus();\n            Utilities.requestFullscreen(this.$photoviewer[0]);\n        }\n        _keydown(e) {\n            if (!this.options.keyboard) {\n                return false;\n            }\n            const keyCode = e.keyCode || e.which || e.charCode;\n            const ctrlKey = e.ctrlKey || e.metaKey;\n            const altKey = e.altKey || e.metaKey;\n            switch (keyCode) {\n                // ←\n                case 37:\n                    this.jump(-1);\n                    break;\n                // →\n                case 39:\n                    this.jump(1);\n                    break;\n                // +\n                case 187:\n                    this.zoom(this.options.ratioThreshold * 3, {\n                        x: this.$stage.width() / 2,\n                        y: this.$stage.height() / 2\n                    }, e);\n                    break;\n                // -\n                case 189:\n                    this.zoom(-this.options.ratioThreshold * 3, {\n                        x: this.$stage.width() / 2,\n                        y: this.$stage.height() / 2\n                    }, e);\n                    break;\n                // + Firefox\n                case 61:\n                    this.zoom(this.options.ratioThreshold * 3, {\n                        x: this.$stage.width() / 2,\n                        y: this.$stage.height() / 2\n                    }, e);\n                    break;\n                // - Firefox\n                case 173:\n                    this.zoom(-this.options.ratioThreshold * 3, {\n                        x: this.$stage.width() / 2,\n                        y: this.$stage.height() / 2\n                    }, e);\n                    break;\n                // Ctrl + Alt + 0\n                case 48:\n                    if (ctrlKey && altKey) {\n                        this.zoomTo(1, {\n                            x: this.$stage.width() / 2,\n                            y: this.$stage.height() / 2\n                        }, e);\n                    }\n                    break;\n                // Ctrl + ,\n                case 188:\n                    if (ctrlKey) {\n                        this.rotate(-90);\n                    }\n                    break;\n                // Ctrl + .\n                case 190:\n                    if (ctrlKey) {\n                        this.rotate(90);\n                    }\n                    break;\n                // Q\n                case 81:\n                    this.close();\n                    break;\n                default:\n            }\n        }\n        _addEvents() {\n            this.$close.off(Constants.CLICK_EVENT + Constants.EVENT_NS).on(Constants.CLICK_EVENT + Constants.EVENT_NS, e => {\n                this.close();\n            });\n            this.$stage.off(Constants.WHEEL_EVENT + Constants.EVENT_NS).on(Constants.WHEEL_EVENT + Constants.EVENT_NS, e => {\n                this.wheel(e);\n            });\n            this.$zoomIn.off(Constants.CLICK_EVENT + Constants.EVENT_NS).on(Constants.CLICK_EVENT + Constants.EVENT_NS, e => {\n                this.zoom(this.options.ratioThreshold * 3, {\n                    x: this.$stage.width() / 2,\n                    y: this.$stage.height() / 2\n                }, e);\n            });\n            this.$zoomOut.off(Constants.CLICK_EVENT + Constants.EVENT_NS).on(Constants.CLICK_EVENT + Constants.EVENT_NS, e => {\n                this.zoom(-this.options.ratioThreshold * 3, {\n                    x: this.$stage.width() / 2,\n                    y: this.$stage.height() / 2\n                }, e);\n            });\n            this.$actualSize.off(Constants.CLICK_EVENT + Constants.EVENT_NS).on(Constants.CLICK_EVENT + Constants.EVENT_NS, e => {\n                this.zoomTo(1, {\n                    x: this.$stage.width() / 2,\n                    y: this.$stage.height() / 2\n                }, e);\n            });\n            this.$prev.off(Constants.CLICK_EVENT + Constants.EVENT_NS).on(Constants.CLICK_EVENT + Constants.EVENT_NS, () => {\n                this.jump(-1);\n            });\n            this.$fullscreen.off(Constants.CLICK_EVENT + Constants.EVENT_NS).on(Constants.CLICK_EVENT + Constants.EVENT_NS, () => {\n                this.fullscreen();\n            });\n            this.$next.off(Constants.CLICK_EVENT + Constants.EVENT_NS).on(Constants.CLICK_EVENT + Constants.EVENT_NS, () => {\n                this.jump(1);\n            });\n            this.$rotateLeft.off(Constants.CLICK_EVENT + Constants.EVENT_NS).on(Constants.CLICK_EVENT + Constants.EVENT_NS, () => {\n                this.rotate(-90);\n            });\n            this.$rotateRight.off(Constants.CLICK_EVENT + Constants.EVENT_NS).on(Constants.CLICK_EVENT + Constants.EVENT_NS, () => {\n                this.rotate(90);\n            });\n            this.$maximize.off(Constants.CLICK_EVENT + Constants.EVENT_NS).on(Constants.CLICK_EVENT + Constants.EVENT_NS, () => {\n                this.maximize();\n            });\n            this.$photoviewer.off(Constants.KEYDOWN_EVENT + Constants.EVENT_NS).on(Constants.KEYDOWN_EVENT + Constants.EVENT_NS, e => {\n                this._keydown(e);\n            });\n            Constants.$W.on(Constants.RESIZE_EVENT + Constants.EVENT_NS, this.resize());\n        }\n        _addCustomButtonEvents() {\n            for (const btnKey in this.options.customButtons) {\n                this.$photoviewer.find(Constants.CLASS_NS + '-button-' + btnKey).off(Constants.CLICK_EVENT + Constants.EVENT_NS).on(Constants.CLICK_EVENT + Constants.EVENT_NS, e => {\n                    this.options.customButtons[btnKey].click.apply(this, [\n                        this,\n                        e\n                    ]);\n                });\n            }\n        }\n        _triggerHook(e, data) {\n            if (this.options.callbacks[e]) {\n                this.options.callbacks[e].apply(this, $.isArray(data) ? data : [data]);\n            }\n        }\n    }\n    $.extend(PhotoViewer.prototype, draggable, movable, resizable);\n    window.PhotoViewer = PhotoViewer;\n    return PhotoViewer;\n});\ndefine('skylark-photoviewer/main',[\n\t'./core'\n], function (PhotoViewer) {\n    'use strict';\n    return PhotoViewer;\n});\ndefine('skylark-photoviewer', ['skylark-photoviewer/main'], function (main) { return main; });\n\n"]}